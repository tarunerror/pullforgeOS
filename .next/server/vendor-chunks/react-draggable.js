"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-draggable";
exports.ids = ["vendor-chunks/react-draggable"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/Draggable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/Draggable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraggableCore\", ({\n    enumerable: true,\n    get: function() {\n        return _DraggableCore.default;\n    }\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"));\nvar _clsx = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.js\");\nvar _domFns = __webpack_require__(/*! ./utils/domFns */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/domFns.js\");\nvar _positionFns = __webpack_require__(/*! ./utils/positionFns */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/positionFns.js\");\nvar _shims = __webpack_require__(/*! ./utils/shims */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js\");\nvar _DraggableCore = _interopRequireDefault(__webpack_require__(/*! ./DraggableCore */ \"(ssr)/./node_modules/react-draggable/build/cjs/DraggableCore.js\"));\nvar _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/log.js\"));\nfunction _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nfunction _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap();\n    return (_interopRequireWildcard = function(e, t) {\n        if (!t && e && e.__esModule) return e;\n        var o, i, f = {\n            __proto__: null,\n            default: e\n        };\n        if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n        if (o = t ? n : r) {\n            if (o.has(e)) return o.get(e);\n            o.set(e, f);\n        }\n        for(const t in e)\"default\" !== t && ({}).hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n        return f;\n    })(e, t);\n}\nfunction _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function(n) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n        }\n        return n;\n    }, _extends.apply(null, arguments);\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n} /*:: import type {ControlPosition, PositionOffsetControlPosition, DraggableCoreProps, DraggableCoreDefaultProps} from './DraggableCore';*/ \n/*:: import type {Bounds, DraggableEventHandler} from './utils/types';*/ /*:: import type {Element as ReactElement} from 'react';*/ /*:: type DraggableState = {\n  dragging: boolean,\n  dragged: boolean,\n  x: number, y: number,\n  slackX: number, slackY: number,\n  isElementSVG: boolean,\n  prevPropsPosition: ?ControlPosition,\n};*/ /*:: export type DraggableDefaultProps = {\n  ...DraggableCoreDefaultProps,\n  axis: 'both' | 'x' | 'y' | 'none',\n  bounds: Bounds | string | false,\n  defaultClassName: string,\n  defaultClassNameDragging: string,\n  defaultClassNameDragged: string,\n  defaultPosition: ControlPosition,\n  scale: number,\n};*/ /*:: export type DraggableProps = {\n  ...DraggableCoreProps,\n  ...DraggableDefaultProps,\n  positionOffset: PositionOffsetControlPosition,\n  position: ControlPosition,\n};*/ //\n// Define <Draggable>\n//\nclass Draggable extends React.Component /*:: <DraggableProps, DraggableState>*/  {\n    // React 16.3+\n    // Arity (props, state)\n    static getDerivedStateFromProps(_ref /*:: */ , _ref2 /*:: */ ) /*: ?Partial<DraggableState>*/ {\n        let { position } /*: DraggableProps*/  = _ref /*: DraggableProps*/ ;\n        let { prevPropsPosition } /*: DraggableState*/  = _ref2 /*: DraggableState*/ ;\n        // Set x/y if a new position is provided in props that is different than the previous.\n        if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {\n            (0, _log.default)(\"Draggable: getDerivedStateFromProps %j\", {\n                position,\n                prevPropsPosition\n            });\n            return {\n                x: position.x,\n                y: position.y,\n                prevPropsPosition: {\n                    ...position\n                }\n            };\n        }\n        return null;\n    }\n    constructor(props /*: DraggableProps*/ ){\n        super(props);\n        _defineProperty(this, \"onDragStart\", (e, coreData)=>{\n            (0, _log.default)(\"Draggable: onDragStart: %j\", coreData);\n            // Short-circuit if user's callback killed it.\n            const shouldStart = this.props.onStart(e, (0, _positionFns.createDraggableData)(this, coreData));\n            // Kills start event on core as well, so move handlers are never bound.\n            if (shouldStart === false) return false;\n            this.setState({\n                dragging: true,\n                dragged: true\n            });\n        });\n        _defineProperty(this, \"onDrag\", (e, coreData)=>{\n            if (!this.state.dragging) return false;\n            (0, _log.default)(\"Draggable: onDrag: %j\", coreData);\n            const uiData = (0, _positionFns.createDraggableData)(this, coreData);\n            const newState = {\n                x: uiData.x,\n                y: uiData.y,\n                slackX: 0,\n                slackY: 0\n            };\n            // Keep within bounds.\n            if (this.props.bounds) {\n                // Save original x and y.\n                const { x, y } = newState;\n                // Add slack to the values used to calculate bound position. This will ensure that if\n                // we start removing slack, the element won't react to it right away until it's been\n                // completely removed.\n                newState.x += this.state.slackX;\n                newState.y += this.state.slackY;\n                // Get bound position. This will ceil/floor the x and y within the boundaries.\n                const [newStateX, newStateY] = (0, _positionFns.getBoundPosition)(this, newState.x, newState.y);\n                newState.x = newStateX;\n                newState.y = newStateY;\n                // Recalculate slack by noting how much was shaved by the boundPosition handler.\n                newState.slackX = this.state.slackX + (x - newState.x);\n                newState.slackY = this.state.slackY + (y - newState.y);\n                // Update the event we fire to reflect what really happened after bounds took effect.\n                uiData.x = newState.x;\n                uiData.y = newState.y;\n                uiData.deltaX = newState.x - this.state.x;\n                uiData.deltaY = newState.y - this.state.y;\n            }\n            // Short-circuit if user's callback killed it.\n            const shouldUpdate = this.props.onDrag(e, uiData);\n            if (shouldUpdate === false) return false;\n            this.setState(newState);\n        });\n        _defineProperty(this, \"onDragStop\", (e, coreData)=>{\n            if (!this.state.dragging) return false;\n            // Short-circuit if user's callback killed it.\n            const shouldContinue = this.props.onStop(e, (0, _positionFns.createDraggableData)(this, coreData));\n            if (shouldContinue === false) return false;\n            (0, _log.default)(\"Draggable: onDragStop: %j\", coreData);\n            const newState /*: Partial<DraggableState>*/  = {\n                dragging: false,\n                slackX: 0,\n                slackY: 0\n            };\n            // If this is a controlled component, the result of this operation will be to\n            // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n            const controlled = Boolean(this.props.position);\n            if (controlled) {\n                const { x, y } = this.props.position;\n                newState.x = x;\n                newState.y = y;\n            }\n            this.setState(newState);\n        });\n        this.state = {\n            // Whether or not we are currently dragging.\n            dragging: false,\n            // Whether or not we have been dragged before.\n            dragged: false,\n            // Current transform x and y.\n            x: props.position ? props.position.x : props.defaultPosition.x,\n            y: props.position ? props.position.y : props.defaultPosition.y,\n            prevPropsPosition: {\n                ...props.position\n            },\n            // Used for compensating for out-of-bounds drags\n            slackX: 0,\n            slackY: 0,\n            // Can only determine if SVG after mounting\n            isElementSVG: false\n        };\n        if (props.position && !(props.onDrag || props.onStop)) {\n            // eslint-disable-next-line no-console\n            console.warn(\"A `position` was applied to this <Draggable>, without drag handlers. This will make this \" + \"component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the \" + \"`position` of this element.\");\n        }\n    }\n    componentDidMount() {\n        // Check to see if the element passed is an instanceof SVGElement\n        if (typeof window.SVGElement !== \"undefined\" && this.findDOMNode() instanceof window.SVGElement) {\n            this.setState({\n                isElementSVG: true\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.dragging) {\n            this.setState({\n                dragging: false\n            }); // prevents invariant if unmounted while dragging\n        }\n    }\n    // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n    // the underlying DOM node ourselves. See the README for more information.\n    findDOMNode() /*: ?HTMLElement*/ {\n        return this.props?.nodeRef?.current ?? _reactDom.default.findDOMNode(this);\n    }\n    render() /*: ReactElement<any>*/ {\n        const { axis, bounds, children, defaultPosition, defaultClassName, defaultClassNameDragging, defaultClassNameDragged, position, positionOffset, scale, ...draggableCoreProps } = this.props;\n        let style = {};\n        let svgTransform = null;\n        // If this is controlled, we don't want to move it - unless it's dragging.\n        const controlled = Boolean(position);\n        const draggable = !controlled || this.state.dragging;\n        const validPosition = position || defaultPosition;\n        const transformOpts = {\n            // Set left if horizontal drag is enabled\n            x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,\n            // Set top if vertical drag is enabled\n            y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y\n        };\n        // If this element was SVG, we use the `transform` attribute.\n        if (this.state.isElementSVG) {\n            svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);\n        } else {\n            // Add a CSS transform to move the element around. This allows us to move the element around\n            // without worrying about whether or not it is relatively or absolutely positioned.\n            // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n            // has a clean slate.\n            style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);\n        }\n        // Mark with class while dragging\n        const className = (0, _clsx.clsx)(children.props.className || \"\", defaultClassName, {\n            [defaultClassNameDragging]: this.state.dragging,\n            [defaultClassNameDragged]: this.state.dragged\n        });\n        // Reuse the child provided\n        // This makes it flexible to use whatever element is wanted (div, ul, etc)\n        return /*#__PURE__*/ React.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {\n            onStart: this.onDragStart,\n            onDrag: this.onDrag,\n            onStop: this.onDragStop\n        }), /*#__PURE__*/ React.cloneElement(React.Children.only(children), {\n            className: className,\n            style: {\n                ...children.props.style,\n                ...style\n            },\n            transform: svgTransform\n        }));\n    }\n}\nexports[\"default\"] = Draggable;\n_defineProperty(Draggable, \"displayName\", \"Draggable\");\n_defineProperty(Draggable, \"propTypes\", {\n    // Accepts all props <DraggableCore> accepts.\n    ..._DraggableCore.default.propTypes,\n    /**\n   * `axis` determines which axis the draggable can move.\n   *\n   *  Note that all callbacks will still return data as normal. This only\n   *  controls flushing to the DOM.\n   *\n   * 'both' allows movement horizontally and vertically.\n   * 'x' limits movement to horizontal axis.\n   * 'y' limits movement to vertical axis.\n   * 'none' limits all movement.\n   *\n   * Defaults to 'both'.\n   */ axis: _propTypes.default.oneOf([\n        \"both\",\n        \"x\",\n        \"y\",\n        \"none\"\n    ]),\n    /**\n   * `bounds` determines the range of movement available to the element.\n   * Available values are:\n   *\n   * 'parent' restricts movement within the Draggable's parent node.\n   *\n   * Alternatively, pass an object with the following properties, all of which are optional:\n   *\n   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n   *\n   * All values are in px.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable bounds={{right: 300, bottom: 300}}>\n   *              <div>Content</div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */ bounds: _propTypes.default.oneOfType([\n        _propTypes.default.shape({\n            left: _propTypes.default.number,\n            right: _propTypes.default.number,\n            top: _propTypes.default.number,\n            bottom: _propTypes.default.number\n        }),\n        _propTypes.default.string,\n        _propTypes.default.oneOf([\n            false\n        ])\n    ]),\n    defaultClassName: _propTypes.default.string,\n    defaultClassNameDragging: _propTypes.default.string,\n    defaultClassNameDragged: _propTypes.default.string,\n    /**\n   * `defaultPosition` specifies the x and y that the dragged item should start at\n   *\n   * Example:\n   *\n   * ```jsx\n   *      let App = React.createClass({\n   *          render: function () {\n   *              return (\n   *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n   *                  </Draggable>\n   *              );\n   *          }\n   *      });\n   * ```\n   */ defaultPosition: _propTypes.default.shape({\n        x: _propTypes.default.number,\n        y: _propTypes.default.number\n    }),\n    positionOffset: _propTypes.default.shape({\n        x: _propTypes.default.oneOfType([\n            _propTypes.default.number,\n            _propTypes.default.string\n        ]),\n        y: _propTypes.default.oneOfType([\n            _propTypes.default.number,\n            _propTypes.default.string\n        ])\n    }),\n    /**\n   * `position`, if present, defines the current position of the element.\n   *\n   *  This is similar to how form elements in React work - if no `position` is supplied, the component\n   *  is uncontrolled.\n   *\n   * Example:\n   *\n   * ```jsx\n   *      let App = React.createClass({\n   *          render: function () {\n   *              return (\n   *                  <Draggable position={{x: 25, y: 25}}>\n   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n   *                  </Draggable>\n   *              );\n   *          }\n   *      });\n   * ```\n   */ position: _propTypes.default.shape({\n        x: _propTypes.default.number,\n        y: _propTypes.default.number\n    }),\n    /**\n   * These properties should be defined on the child, not here.\n   */ className: _shims.dontSetMe,\n    style: _shims.dontSetMe,\n    transform: _shims.dontSetMe\n});\n_defineProperty(Draggable, \"defaultProps\", {\n    ..._DraggableCore.default.defaultProps,\n    axis: \"both\",\n    bounds: false,\n    defaultClassName: \"react-draggable\",\n    defaultClassNameDragging: \"react-draggable-dragging\",\n    defaultClassNameDragged: \"react-draggable-dragged\",\n    defaultPosition: {\n        x: 0,\n        y: 0\n    },\n    scale: 1\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/Draggable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/DraggableCore.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/DraggableCore.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"));\nvar _domFns = __webpack_require__(/*! ./utils/domFns */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/domFns.js\");\nvar _positionFns = __webpack_require__(/*! ./utils/positionFns */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/positionFns.js\");\nvar _shims = __webpack_require__(/*! ./utils/shims */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js\");\nvar _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/log.js\"));\nfunction _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nfunction _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap();\n    return (_interopRequireWildcard = function(e, t) {\n        if (!t && e && e.__esModule) return e;\n        var o, i, f = {\n            __proto__: null,\n            default: e\n        };\n        if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n        if (o = t ? n : r) {\n            if (o.has(e)) return o.get(e);\n            o.set(e, f);\n        }\n        for(const t in e)\"default\" !== t && ({}).hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n        return f;\n    })(e, t);\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\n/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/ /*:: import type {Element as ReactElement} from 'react';*/ // Simple abstraction for dragging events names.\nconst eventsFor = {\n    touch: {\n        start: \"touchstart\",\n        move: \"touchmove\",\n        stop: \"touchend\"\n    },\n    mouse: {\n        start: \"mousedown\",\n        move: \"mousemove\",\n        stop: \"mouseup\"\n    }\n};\n// Default to mouse events.\nlet dragEventFor = eventsFor.mouse;\n/*:: export type DraggableData = {\n  node: HTMLElement,\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number,\n};*/ /*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/ /*:: export type ControlPosition = {x: number, y: number};*/ /*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/ /*:: export type DraggableCoreDefaultProps = {\n  allowAnyClick: boolean,\n  allowMobileScroll: boolean,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void,\n  scale: number,\n};*/ /*:: export type DraggableCoreProps = {\n  ...DraggableCoreDefaultProps,\n  cancel: string,\n  children: ReactElement<any>,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  nodeRef?: ?React.ElementRef<any>,\n};*/ //\n// Define <DraggableCore>.\n//\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n// work well with libraries that require more control over the element.\n//\nclass DraggableCore extends React.Component /*:: <DraggableCoreProps>*/  {\n    constructor(){\n        super(...arguments);\n        _defineProperty(this, \"dragging\", false);\n        // Used while dragging to determine deltas.\n        _defineProperty(this, \"lastX\", NaN);\n        _defineProperty(this, \"lastY\", NaN);\n        _defineProperty(this, \"touchIdentifier\", null);\n        _defineProperty(this, \"mounted\", false);\n        _defineProperty(this, \"handleDragStart\", (e)=>{\n            // Make it possible to attach event handlers on top of this one.\n            this.props.onMouseDown(e);\n            // Only accept left-clicks.\n            if (!this.props.allowAnyClick && typeof e.button === \"number\" && e.button !== 0) return false;\n            // Get nodes. Be sure to grab relative document (could be iframed)\n            const thisNode = this.findDOMNode();\n            if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n                throw new Error(\"<DraggableCore> not mounted on DragStart!\");\n            }\n            const { ownerDocument } = thisNode;\n            // Short circuit if handle or cancel prop was provided and selector doesn't match.\n            if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {\n                return;\n            }\n            // Prevent scrolling on mobile devices, like ipad/iphone.\n            // Important that this is after handle/cancel.\n            if (e.type === \"touchstart\" && !this.props.allowMobileScroll) e.preventDefault();\n            // Set touch identifier in component state if this is a touch event. This allows us to\n            // distinguish between individual touches on multitouch screens by identifying which\n            // touchpoint was set to this element.\n            const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);\n            this.touchIdentifier = touchIdentifier;\n            // Get the current drag point from the event. This is used as the offset.\n            const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);\n            if (position == null) return; // not possible but satisfies flow\n            const { x, y } = position;\n            // Create an event object with all the data parents need to make a decision here.\n            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n            (0, _log.default)(\"DraggableCore: handleDragStart: %j\", coreEvent);\n            // Call event handler. If it returns explicit false, cancel.\n            (0, _log.default)(\"calling\", this.props.onStart);\n            const shouldUpdate = this.props.onStart(e, coreEvent);\n            if (shouldUpdate === false || this.mounted === false) return;\n            // Add a style to the body to disable user-select. This prevents text from\n            // being selected all over the page.\n            if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);\n            // Initiate dragging. Set the current x and y as offsets\n            // so we know how much we've moved during the drag. This allows us\n            // to drag elements around even if they have been moved, without issue.\n            this.dragging = true;\n            this.lastX = x;\n            this.lastY = y;\n            // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n            // this element. We use different events depending on whether or not we have detected that this\n            // is a touch-capable device.\n            (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);\n            (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);\n        });\n        _defineProperty(this, \"handleDrag\", (e)=>{\n            // Get the current drag point from the event. This is used as the offset.\n            const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n            if (position == null) return;\n            let { x, y } = position;\n            // Snap to grid if prop has been provided\n            if (Array.isArray(this.props.grid)) {\n                let deltaX = x - this.lastX, deltaY = y - this.lastY;\n                [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n                if (!deltaX && !deltaY) return; // skip useless drag\n                x = this.lastX + deltaX, y = this.lastY + deltaY;\n            }\n            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n            (0, _log.default)(\"DraggableCore: handleDrag: %j\", coreEvent);\n            // Call event handler. If it returns explicit false, trigger end.\n            const shouldUpdate = this.props.onDrag(e, coreEvent);\n            if (shouldUpdate === false || this.mounted === false) {\n                try {\n                    // $FlowIgnore\n                    this.handleDragStop(new MouseEvent(\"mouseup\"));\n                } catch (err) {\n                    // Old browsers\n                    const event = document.createEvent(\"MouseEvents\");\n                    // I see why this insanity was deprecated\n                    // $FlowIgnore\n                    event.initMouseEvent(\"mouseup\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n                    this.handleDragStop(event);\n                }\n                return;\n            }\n            this.lastX = x;\n            this.lastY = y;\n        });\n        _defineProperty(this, \"handleDragStop\", (e)=>{\n            if (!this.dragging) return;\n            const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n            if (position == null) return;\n            let { x, y } = position;\n            // Snap to grid if prop has been provided\n            if (Array.isArray(this.props.grid)) {\n                let deltaX = x - this.lastX || 0;\n                let deltaY = y - this.lastY || 0;\n                [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n                x = this.lastX + deltaX, y = this.lastY + deltaY;\n            }\n            const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n            // Call event handler\n            const shouldContinue = this.props.onStop(e, coreEvent);\n            if (shouldContinue === false || this.mounted === false) return false;\n            const thisNode = this.findDOMNode();\n            if (thisNode) {\n                // Remove user-select hack\n                if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(thisNode.ownerDocument);\n            }\n            (0, _log.default)(\"DraggableCore: handleDragStop: %j\", coreEvent);\n            // Reset the el.\n            this.dragging = false;\n            this.lastX = NaN;\n            this.lastY = NaN;\n            if (thisNode) {\n                // Remove event handlers\n                (0, _log.default)(\"DraggableCore: Removing handlers\");\n                (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);\n                (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);\n            }\n        });\n        _defineProperty(this, \"onMouseDown\", (e)=>{\n            dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n            return this.handleDragStart(e);\n        });\n        _defineProperty(this, \"onMouseUp\", (e)=>{\n            dragEventFor = eventsFor.mouse;\n            return this.handleDragStop(e);\n        });\n        // Same as onMouseDown (start drag), but now consider this a touch device.\n        _defineProperty(this, \"onTouchStart\", (e)=>{\n            // We're on a touch device now, so change the event handlers\n            dragEventFor = eventsFor.touch;\n            return this.handleDragStart(e);\n        });\n        _defineProperty(this, \"onTouchEnd\", (e)=>{\n            // We're on a touch device now, so change the event handlers\n            dragEventFor = eventsFor.touch;\n            return this.handleDragStop(e);\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n        // Touch handlers must be added with {passive: false} to be cancelable.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        const thisNode = this.findDOMNode();\n        if (thisNode) {\n            (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n                passive: false\n            });\n        }\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n        // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n        // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n        const thisNode = this.findDOMNode();\n        if (thisNode) {\n            const { ownerDocument } = thisNode;\n            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);\n            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n            (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n                passive: false\n            });\n            if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(ownerDocument);\n        }\n    }\n    // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n    // the underlying DOM node ourselves. See the README for more information.\n    findDOMNode() /*: ?HTMLElement*/ {\n        return this.props?.nodeRef ? this.props?.nodeRef?.current : _reactDom.default.findDOMNode(this);\n    }\n    render() /*: React.Element<any>*/ {\n        // Reuse the child provided\n        // This makes it flexible to use whatever element is wanted (div, ul, etc)\n        return /*#__PURE__*/ React.cloneElement(React.Children.only(this.props.children), {\n            // Note: mouseMove handler is attached to document so it will still function\n            // when the user drags quickly and leaves the bounds of the element.\n            onMouseDown: this.onMouseDown,\n            onMouseUp: this.onMouseUp,\n            // onTouchStart is added on `componentDidMount` so they can be added with\n            // {passive: false}, which allows it to cancel. See\n            // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n            onTouchEnd: this.onTouchEnd\n        });\n    }\n}\nexports[\"default\"] = DraggableCore;\n_defineProperty(DraggableCore, \"displayName\", \"DraggableCore\");\n_defineProperty(DraggableCore, \"propTypes\", {\n    /**\n   * `allowAnyClick` allows dragging using any mouse button.\n   * By default, we only accept the left button.\n   *\n   * Defaults to `false`.\n   */ allowAnyClick: _propTypes.default.bool,\n    /**\n   * `allowMobileScroll` turns off cancellation of the 'touchstart' event\n   * on mobile devices. Only enable this if you are having trouble with click\n   * events. Prefer using 'handle' / 'cancel' instead.\n   *\n   * Defaults to `false`.\n   */ allowMobileScroll: _propTypes.default.bool,\n    children: _propTypes.default.node.isRequired,\n    /**\n   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n   * with the exception of `onMouseDown`, will not fire.\n   */ disabled: _propTypes.default.bool,\n    /**\n   * By default, we add 'user-select:none' attributes to the document body\n   * to prevent ugly text selection during drag. If this is causing problems\n   * for your app, set this to `false`.\n   */ enableUserSelectHack: _propTypes.default.bool,\n    /**\n   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n   * instead of using the parent node.\n   */ offsetParent: function(props /*: DraggableCoreProps*/ , propName /*: $Keys<DraggableCoreProps>*/ ) {\n        if (props[propName] && props[propName].nodeType !== 1) {\n            throw new Error(\"Draggable's offsetParent must be a DOM Node.\");\n        }\n    },\n    /**\n   * `grid` specifies the x and y that dragging should snap to.\n   */ grid: _propTypes.default.arrayOf(_propTypes.default.number),\n    /**\n   * `handle` specifies a selector to be used as the handle that initiates drag.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable handle=\".handle\">\n   *              <div>\n   *                  <div className=\"handle\">Click me to drag</div>\n   *                  <div>This is some other content</div>\n   *              </div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */ handle: _propTypes.default.string,\n    /**\n   * `cancel` specifies a selector to be used to prevent drag initialization.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *           return(\n   *               <Draggable cancel=\".cancel\">\n   *                   <div>\n   *                     <div className=\"cancel\">You can't drag from here</div>\n   *                     <div>Dragging here works fine</div>\n   *                   </div>\n   *               </Draggable>\n   *           );\n   *       }\n   *   });\n   * ```\n   */ cancel: _propTypes.default.string,\n    /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.\n   * Unfortunately, in order for <Draggable> to work properly, we need raw access\n   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`\n   * as in this example:\n   *\n   * function MyComponent() {\n   *   const nodeRef = React.useRef(null);\n   *   return (\n   *     <Draggable nodeRef={nodeRef}>\n   *       <div ref={nodeRef}>Example Target</div>\n   *     </Draggable>\n   *   );\n   * }\n   *\n   * This can be used for arbitrarily nested components, so long as the ref ends up\n   * pointing to the actual child DOM node and not a custom component.\n   */ nodeRef: _propTypes.default.object,\n    /**\n   * Called when dragging starts.\n   * If this function returns the boolean false, dragging will be canceled.\n   */ onStart: _propTypes.default.func,\n    /**\n   * Called while dragging.\n   * If this function returns the boolean false, dragging will be canceled.\n   */ onDrag: _propTypes.default.func,\n    /**\n   * Called when dragging stops.\n   * If this function returns the boolean false, the drag will remain active.\n   */ onStop: _propTypes.default.func,\n    /**\n   * A workaround option which can be passed if onMouseDown needs to be accessed,\n   * since it'll always be blocked (as there is internal use of onMouseDown)\n   */ onMouseDown: _propTypes.default.func,\n    /**\n   * `scale`, if set, applies scaling while dragging an element\n   */ scale: _propTypes.default.number,\n    /**\n   * These properties should be defined on the child, not here.\n   */ className: _shims.dontSetMe,\n    style: _shims.dontSetMe,\n    transform: _shims.dontSetMe\n});\n_defineProperty(DraggableCore, \"defaultProps\", {\n    allowAnyClick: false,\n    // by default only accept left click\n    allowMobileScroll: false,\n    disabled: false,\n    enableUserSelectHack: true,\n    onStart: function() {},\n    onDrag: function() {},\n    onStop: function() {},\n    onMouseDown: function() {},\n    scale: 1\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/DraggableCore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/cjs.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { default: Draggable, DraggableCore } = __webpack_require__(/*! ./Draggable */ \"(ssr)/./node_modules/react-draggable/build/cjs/Draggable.js\");\n// Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.\n// See https://github.com/mzabriskie/react-draggable/pull/254\n// and https://github.com/mzabriskie/react-draggable/issues/266\nmodule.exports = Draggable;\nmodule.exports[\"default\"] = Draggable;\nmodule.exports.DraggableCore = DraggableCore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy9janMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixNQUFNLEVBQ0pBLFNBQVNDLFNBQVMsRUFDbEJDLGFBQWEsRUFDZCxHQUFHQyxtQkFBT0EsQ0FBQztBQUVaLHlKQUF5SjtBQUN6Siw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9EQyxPQUFPQyxPQUFPLEdBQUdKO0FBQ2pCRyx5QkFBc0IsR0FBR0g7QUFDekJHLDRCQUE0QixHQUFHRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL2Nqcy5qcz83NzYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7XG4gIGRlZmF1bHQ6IERyYWdnYWJsZSxcbiAgRHJhZ2dhYmxlQ29yZVxufSA9IHJlcXVpcmUoJy4vRHJhZ2dhYmxlJyk7XG5cbi8vIFByZXZpb3VzIHZlcnNpb25zIG9mIHRoaXMgbGliIGV4cG9ydGVkIDxEcmFnZ2FibGU+IGFzIHRoZSByb290IGV4cG9ydC4gQXMgdG8gbm8tLy8gdGhlbSwgb3IgVHlwZVNjcmlwdCwgd2UgZXhwb3J0ICpib3RoKiBhcyB0aGUgcm9vdCBhbmQgYXMgJ2RlZmF1bHQnLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL3JlYWN0LWRyYWdnYWJsZS9wdWxsLzI1NFxuLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL3JlYWN0LWRyYWdnYWJsZS9pc3N1ZXMvMjY2XG5tb2R1bGUuZXhwb3J0cyA9IERyYWdnYWJsZTtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBEcmFnZ2FibGU7XG5tb2R1bGUuZXhwb3J0cy5EcmFnZ2FibGVDb3JlID0gRHJhZ2dhYmxlQ29yZTsiXSwibmFtZXMiOlsiZGVmYXVsdCIsIkRyYWdnYWJsZSIsIkRyYWdnYWJsZUNvcmUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/utils/domFns.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/domFns.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addClassName = addClassName;\nexports.addEvent = addEvent;\nexports.addUserSelectStyles = addUserSelectStyles;\nexports.createCSSTransform = createCSSTransform;\nexports.createSVGTransform = createSVGTransform;\nexports.getTouch = getTouch;\nexports.getTouchIdentifier = getTouchIdentifier;\nexports.getTranslation = getTranslation;\nexports.innerHeight = innerHeight;\nexports.innerWidth = innerWidth;\nexports.matchesSelector = matchesSelector;\nexports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;\nexports.offsetXYFromParent = offsetXYFromParent;\nexports.outerHeight = outerHeight;\nexports.outerWidth = outerWidth;\nexports.removeClassName = removeClassName;\nexports.removeEvent = removeEvent;\nexports.scheduleRemoveUserSelectStyles = scheduleRemoveUserSelectStyles;\nvar _shims = __webpack_require__(/*! ./shims */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js\");\nvar _getPrefix = _interopRequireWildcard(__webpack_require__(/*! ./getPrefix */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/getPrefix.js\"));\nfunction _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap();\n    return (_interopRequireWildcard = function(e, t) {\n        if (!t && e && e.__esModule) return e;\n        var o, i, f = {\n            __proto__: null,\n            default: e\n        };\n        if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n        if (o = t ? n : r) {\n            if (o.has(e)) return o.get(e);\n            o.set(e, f);\n        }\n        for(const t in e)\"default\" !== t && ({}).hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n        return f;\n    })(e, t);\n}\n/*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/ let matchesSelectorFunc = \"\";\nfunction matchesSelector(el /*: Node*/ , selector /*: string*/ ) /*: boolean*/ {\n    if (!matchesSelectorFunc) {\n        matchesSelectorFunc = (0, _shims.findInArray)([\n            \"matches\",\n            \"webkitMatchesSelector\",\n            \"mozMatchesSelector\",\n            \"msMatchesSelector\",\n            \"oMatchesSelector\"\n        ], function(method) {\n            // $FlowIgnore: Doesn't think elements are indexable\n            return (0, _shims.isFunction)(el[method]);\n        });\n    }\n    // Might not be found entirely (not an Element?) - in that case, bail\n    // $FlowIgnore: Doesn't think elements are indexable\n    if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false;\n    // $FlowIgnore: Doesn't think elements are indexable\n    return el[matchesSelectorFunc](selector);\n}\n// Works up the tree to the draggable itself attempting to match selector.\nfunction matchesSelectorAndParentsTo(el /*: Node*/ , selector /*: string*/ , baseNode /*: Node*/ ) /*: boolean*/ {\n    let node = el;\n    do {\n        if (matchesSelector(node, selector)) return true;\n        if (node === baseNode) return false;\n        // $FlowIgnore[incompatible-type]\n        node = node.parentNode;\n    }while (node);\n    return false;\n}\nfunction addEvent(el /*: ?Node*/ , event /*: string*/ , handler /*: Function*/ , inputOptions /*: Object*/ ) /*: void*/ {\n    if (!el) return;\n    const options = {\n        capture: true,\n        ...inputOptions\n    };\n    // $FlowIgnore[method-unbinding]\n    if (el.addEventListener) {\n        el.addEventListener(event, handler, options);\n    } else if (el.attachEvent) {\n        el.attachEvent(\"on\" + event, handler);\n    } else {\n        // $FlowIgnore: Doesn't think elements are indexable\n        el[\"on\" + event] = handler;\n    }\n}\nfunction removeEvent(el /*: ?Node*/ , event /*: string*/ , handler /*: Function*/ , inputOptions /*: Object*/ ) /*: void*/ {\n    if (!el) return;\n    const options = {\n        capture: true,\n        ...inputOptions\n    };\n    // $FlowIgnore[method-unbinding]\n    if (el.removeEventListener) {\n        el.removeEventListener(event, handler, options);\n    } else if (el.detachEvent) {\n        el.detachEvent(\"on\" + event, handler);\n    } else {\n        // $FlowIgnore: Doesn't think elements are indexable\n        el[\"on\" + event] = null;\n    }\n}\nfunction outerHeight(node /*: HTMLElement*/ ) /*: number*/ {\n    // This is deliberately excluding margin for our calculations, since we are using\n    // offsetTop which is including margin. See getBoundPosition\n    let height = node.clientHeight;\n    const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    height += (0, _shims.int)(computedStyle.borderTopWidth);\n    height += (0, _shims.int)(computedStyle.borderBottomWidth);\n    return height;\n}\nfunction outerWidth(node /*: HTMLElement*/ ) /*: number*/ {\n    // This is deliberately excluding margin for our calculations, since we are using\n    // offsetLeft which is including margin. See getBoundPosition\n    let width = node.clientWidth;\n    const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    width += (0, _shims.int)(computedStyle.borderLeftWidth);\n    width += (0, _shims.int)(computedStyle.borderRightWidth);\n    return width;\n}\nfunction innerHeight(node /*: HTMLElement*/ ) /*: number*/ {\n    let height = node.clientHeight;\n    const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    height -= (0, _shims.int)(computedStyle.paddingTop);\n    height -= (0, _shims.int)(computedStyle.paddingBottom);\n    return height;\n}\nfunction innerWidth(node /*: HTMLElement*/ ) /*: number*/ {\n    let width = node.clientWidth;\n    const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    width -= (0, _shims.int)(computedStyle.paddingLeft);\n    width -= (0, _shims.int)(computedStyle.paddingRight);\n    return width;\n}\n/*:: interface EventWithOffset {\n  clientX: number, clientY: number\n}*/ // Get from offsetParent\nfunction offsetXYFromParent(evt /*: EventWithOffset*/ , offsetParent /*: HTMLElement*/ , scale /*: number*/ ) /*: ControlPosition*/ {\n    const isBody = offsetParent === offsetParent.ownerDocument.body;\n    const offsetParentRect = isBody ? {\n        left: 0,\n        top: 0\n    } : offsetParent.getBoundingClientRect();\n    const x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;\n    const y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;\n    return {\n        x,\n        y\n    };\n}\nfunction createCSSTransform(controlPos /*: ControlPosition*/ , positionOffset /*: PositionOffsetControlPosition*/ ) /*: Object*/ {\n    const translation = getTranslation(controlPos, positionOffset, \"px\");\n    return {\n        [(0, _getPrefix.browserPrefixToKey)(\"transform\", _getPrefix.default)]: translation\n    };\n}\nfunction createSVGTransform(controlPos /*: ControlPosition*/ , positionOffset /*: PositionOffsetControlPosition*/ ) /*: string*/ {\n    const translation = getTranslation(controlPos, positionOffset, \"\");\n    return translation;\n}\nfunction getTranslation(_ref /*:: */ , positionOffset /*: PositionOffsetControlPosition*/ , unitSuffix /*: string*/ ) /*: string*/ {\n    let { x, y } /*: ControlPosition*/  = _ref /*: ControlPosition*/ ;\n    let translation = `translate(${x}${unitSuffix},${y}${unitSuffix})`;\n    if (positionOffset) {\n        const defaultX = `${typeof positionOffset.x === \"string\" ? positionOffset.x : positionOffset.x + unitSuffix}`;\n        const defaultY = `${typeof positionOffset.y === \"string\" ? positionOffset.y : positionOffset.y + unitSuffix}`;\n        translation = `translate(${defaultX}, ${defaultY})` + translation;\n    }\n    return translation;\n}\nfunction getTouch(e /*: MouseTouchEvent*/ , identifier /*: number*/ ) /*: ?{clientX: number, clientY: number}*/ {\n    return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, (t)=>identifier === t.identifier) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, (t)=>identifier === t.identifier);\n}\nfunction getTouchIdentifier(e /*: MouseTouchEvent*/ ) /*: ?number*/ {\n    if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n    if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n}\n// User-select Hacks:\n//\n// Useful for preventing blue highlights all over everything when dragging.\n// Note we're passing `document` b/c we could be iframed\nfunction addUserSelectStyles(doc /*: ?Document*/ ) {\n    if (!doc) return;\n    let styleEl = doc.getElementById(\"react-draggable-style-el\");\n    if (!styleEl) {\n        styleEl = doc.createElement(\"style\");\n        styleEl.type = \"text/css\";\n        styleEl.id = \"react-draggable-style-el\";\n        styleEl.innerHTML = \".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n\";\n        styleEl.innerHTML += \".react-draggable-transparent-selection *::selection {all: inherit;}\\n\";\n        doc.getElementsByTagName(\"head\")[0].appendChild(styleEl);\n    }\n    if (doc.body) addClassName(doc.body, \"react-draggable-transparent-selection\");\n}\nfunction scheduleRemoveUserSelectStyles(doc /*: ?Document*/ ) {\n    // Prevent a possible \"forced reflow\"\n    if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(()=>{\n            removeUserSelectStyles(doc);\n        });\n    } else {\n        removeUserSelectStyles(doc);\n    }\n}\nfunction removeUserSelectStyles(doc /*: ?Document*/ ) {\n    if (!doc) return;\n    try {\n        if (doc.body) removeClassName(doc.body, \"react-draggable-transparent-selection\");\n        // $FlowIgnore: IE\n        if (doc.selection) {\n            // $FlowIgnore: IE\n            doc.selection.empty();\n        } else {\n            // Remove selection caused by scroll, unless it's a focused input\n            // (we use doc.defaultView in case we're in an iframe)\n            const selection = (doc.defaultView || window).getSelection();\n            if (selection && selection.type !== \"Caret\") {\n                selection.removeAllRanges();\n            }\n        }\n    } catch (e) {\n    // probably IE\n    }\n}\nfunction addClassName(el /*: HTMLElement*/ , className /*: string*/ ) {\n    if (el.classList) {\n        el.classList.add(className);\n    } else {\n        if (!el.className.match(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`))) {\n            el.className += ` ${className}`;\n        }\n    }\n}\nfunction removeClassName(el /*: HTMLElement*/ , className /*: string*/ ) {\n    if (el.classList) {\n        el.classList.remove(className);\n    } else {\n        el.className = el.className.replace(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`, \"g\"), \"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/utils/domFns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/utils/getPrefix.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/getPrefix.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports[\"default\"] = void 0;\nexports.getPrefix = getPrefix;\nconst prefixes = [\n    \"Moz\",\n    \"Webkit\",\n    \"O\",\n    \"ms\"\n];\nfunction getPrefix() /*: string*/ {\n    let prop /*: string*/  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"transform\";\n    // Ensure we're running in an environment where there is actually a global\n    // `window` obj\n    if (true) return \"\";\n    // If we're in a pseudo-browser server-side environment, this access\n    // path may not exist, so bail out if it doesn't.\n    const style = window.document?.documentElement?.style;\n    if (!style) return \"\";\n    if (prop in style) return \"\";\n    for(let i = 0; i < prefixes.length; i++){\n        if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n    }\n    return \"\";\n}\nfunction browserPrefixToKey(prop /*: string*/ , prefix /*: string*/ ) /*: string*/ {\n    return prefix ? `${prefix}${kebabToTitleCase(prop)}` : prop;\n}\nfunction browserPrefixToStyle(prop /*: string*/ , prefix /*: string*/ ) /*: string*/ {\n    return prefix ? `-${prefix.toLowerCase()}-${prop}` : prop;\n}\nfunction kebabToTitleCase(str /*: string*/ ) /*: string*/ {\n    let out = \"\";\n    let shouldCapitalize = true;\n    for(let i = 0; i < str.length; i++){\n        if (shouldCapitalize) {\n            out += str[i].toUpperCase();\n            shouldCapitalize = false;\n        } else if (str[i] === \"-\") {\n            shouldCapitalize = true;\n        } else {\n            out += str[i];\n        }\n    }\n    return out;\n}\n// Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\nvar _default = exports[\"default\"] = getPrefix();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy91dGlscy9nZXRQcmVmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDBCQUEwQixHQUFHRTtBQUM3QkYsNEJBQTRCLEdBQUdHO0FBQy9CSCxrQkFBZSxHQUFHLEtBQUs7QUFDdkJBLGlCQUFpQixHQUFHSztBQUNwQixNQUFNQyxXQUFXO0lBQUM7SUFBTztJQUFVO0lBQUs7Q0FBSztBQUM3QyxTQUFTRCxZQUFZLFVBQVU7SUFDN0IsSUFBSUUsS0FBSyxVQUFVLE1BQUtDLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLRSxZQUFZRixTQUFTLENBQUMsRUFBRSxHQUFHO0lBQzVGLDBFQUEwRTtJQUMxRSxlQUFlO0lBQ2YsSUFBSSxJQUFrQixFQUFhLE9BQU87SUFFMUMsb0VBQW9FO0lBQ3BFLGlEQUFpRDtJQUNqRCxNQUFNRyxRQUFRQyxPQUFPQyxRQUFRLEVBQUVDLGlCQUFpQkg7SUFDaEQsSUFBSSxDQUFDQSxPQUFPLE9BQU87SUFDbkIsSUFBSUosUUFBUUksT0FBTyxPQUFPO0lBQzFCLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJVCxTQUFTRyxNQUFNLEVBQUVNLElBQUs7UUFDeEMsSUFBSWIsbUJBQW1CSyxNQUFNRCxRQUFRLENBQUNTLEVBQUUsS0FBS0osT0FBTyxPQUFPTCxRQUFRLENBQUNTLEVBQUU7SUFDeEU7SUFDQSxPQUFPO0FBQ1Q7QUFDQSxTQUFTYixtQkFBbUJLLEtBQUssVUFBVSxHQUFYLEVBQWVTLE9BQU8sVUFBVSxHQUFYLEVBQWUsVUFBVTtJQUM1RSxPQUFPQSxTQUFTLENBQUMsRUFBRUEsT0FBTyxFQUFFQyxpQkFBaUJWLE1BQU0sQ0FBQyxHQUFHQTtBQUN6RDtBQUNBLFNBQVNKLHFCQUFxQkksS0FBSyxVQUFVLEdBQVgsRUFBZVMsT0FBTyxVQUFVLEdBQVgsRUFBZSxVQUFVO0lBQzlFLE9BQU9BLFNBQVMsQ0FBQyxDQUFDLEVBQUVBLE9BQU9FLFdBQVcsR0FBRyxDQUFDLEVBQUVYLEtBQUssQ0FBQyxHQUFHQTtBQUN2RDtBQUNBLFNBQVNVLGlCQUFpQkUsSUFBSSxVQUFVLEdBQVgsRUFBZSxVQUFVO0lBQ3BELElBQUlDLE1BQU07SUFDVixJQUFJQyxtQkFBbUI7SUFDdkIsSUFBSyxJQUFJTixJQUFJLEdBQUdBLElBQUlJLElBQUlWLE1BQU0sRUFBRU0sSUFBSztRQUNuQyxJQUFJTSxrQkFBa0I7WUFDcEJELE9BQU9ELEdBQUcsQ0FBQ0osRUFBRSxDQUFDTyxXQUFXO1lBQ3pCRCxtQkFBbUI7UUFDckIsT0FBTyxJQUFJRixHQUFHLENBQUNKLEVBQUUsS0FBSyxLQUFLO1lBQ3pCTSxtQkFBbUI7UUFDckIsT0FBTztZQUNMRCxPQUFPRCxHQUFHLENBQUNKLEVBQUU7UUFDZjtJQUNGO0lBQ0EsT0FBT0s7QUFDVDtBQUVBLGlFQUFpRTtBQUNqRSxnRkFBZ0Y7QUFDaEYsc0VBQXNFO0FBQ3RFLElBQUlHLFdBQVd2QixrQkFBZSxHQUFJSyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL3V0aWxzL2dldFByZWZpeC5qcz80NGEzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5icm93c2VyUHJlZml4VG9LZXkgPSBicm93c2VyUHJlZml4VG9LZXk7XG5leHBvcnRzLmJyb3dzZXJQcmVmaXhUb1N0eWxlID0gYnJvd3NlclByZWZpeFRvU3R5bGU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5leHBvcnRzLmdldFByZWZpeCA9IGdldFByZWZpeDtcbmNvbnN0IHByZWZpeGVzID0gWydNb3onLCAnV2Via2l0JywgJ08nLCAnbXMnXTtcbmZ1bmN0aW9uIGdldFByZWZpeCgpIC8qOiBzdHJpbmcqL3tcbiAgbGV0IHByb3AgLyo6IHN0cmluZyovID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAndHJhbnNmb3JtJztcbiAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgaW4gYW4gZW52aXJvbm1lbnQgd2hlcmUgdGhlcmUgaXMgYWN0dWFsbHkgYSBnbG9iYWxcbiAgLy8gYHdpbmRvd2Agb2JqXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuICcnO1xuXG4gIC8vIElmIHdlJ3JlIGluIGEgcHNldWRvLWJyb3dzZXIgc2VydmVyLXNpZGUgZW52aXJvbm1lbnQsIHRoaXMgYWNjZXNzXG4gIC8vIHBhdGggbWF5IG5vdCBleGlzdCwgc28gYmFpbCBvdXQgaWYgaXQgZG9lc24ndC5cbiAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZG9jdW1lbnQ/LmRvY3VtZW50RWxlbWVudD8uc3R5bGU7XG4gIGlmICghc3R5bGUpIHJldHVybiAnJztcbiAgaWYgKHByb3AgaW4gc3R5bGUpIHJldHVybiAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChicm93c2VyUHJlZml4VG9LZXkocHJvcCwgcHJlZml4ZXNbaV0pIGluIHN0eWxlKSByZXR1cm4gcHJlZml4ZXNbaV07XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuZnVuY3Rpb24gYnJvd3NlclByZWZpeFRvS2V5KHByb3AgLyo6IHN0cmluZyovLCBwcmVmaXggLyo6IHN0cmluZyovKSAvKjogc3RyaW5nKi97XG4gIHJldHVybiBwcmVmaXggPyBgJHtwcmVmaXh9JHtrZWJhYlRvVGl0bGVDYXNlKHByb3ApfWAgOiBwcm9wO1xufVxuZnVuY3Rpb24gYnJvd3NlclByZWZpeFRvU3R5bGUocHJvcCAvKjogc3RyaW5nKi8sIHByZWZpeCAvKjogc3RyaW5nKi8pIC8qOiBzdHJpbmcqL3tcbiAgcmV0dXJuIHByZWZpeCA/IGAtJHtwcmVmaXgudG9Mb3dlckNhc2UoKX0tJHtwcm9wfWAgOiBwcm9wO1xufVxuZnVuY3Rpb24ga2ViYWJUb1RpdGxlQ2FzZShzdHIgLyo6IHN0cmluZyovKSAvKjogc3RyaW5nKi97XG4gIGxldCBvdXQgPSAnJztcbiAgbGV0IHNob3VsZENhcGl0YWxpemUgPSB0cnVlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzaG91bGRDYXBpdGFsaXplKSB7XG4gICAgICBvdXQgKz0gc3RyW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICBzaG91bGRDYXBpdGFsaXplID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzdHJbaV0gPT09ICctJykge1xuICAgICAgc2hvdWxkQ2FwaXRhbGl6ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSBzdHJbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbi8vIERlZmF1bHQgZXhwb3J0IGlzIHRoZSBwcmVmaXggaXRzZWxmLCBsaWtlICdNb3onLCAnV2Via2l0JywgZXRjXG4vLyBOb3RlIHRoYXQgeW91IG1heSBoYXZlIHRvIHJlLXRlc3QgZm9yIGNlcnRhaW4gdGhpbmdzOyBmb3IgaW5zdGFuY2UsIENocm9tZSA1MFxuLy8gY2FuIGhhbmRsZSB1bnByZWZpeGVkIGB0cmFuc2Zvcm1gLCBidXQgbm90IHVucHJlZml4ZWQgYHVzZXItc2VsZWN0YFxudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKGdldFByZWZpeCgpIC8qOiBzdHJpbmcqLyk7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYnJvd3NlclByZWZpeFRvS2V5IiwiYnJvd3NlclByZWZpeFRvU3R5bGUiLCJkZWZhdWx0IiwiZ2V0UHJlZml4IiwicHJlZml4ZXMiLCJwcm9wIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic3R5bGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImkiLCJwcmVmaXgiLCJrZWJhYlRvVGl0bGVDYXNlIiwidG9Mb3dlckNhc2UiLCJzdHIiLCJvdXQiLCJzaG91bGRDYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/utils/getPrefix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = log;\n/*eslint no-console:0*/ function log() {\n    if (false) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy91dGlscy9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHO0FBQ2xCLHFCQUFxQixHQUNyQixTQUFTQTtJQUNQLElBQUlDLEtBQVNBLEVBQUVDLEVBQTBCQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL3V0aWxzL2xvZy5qcz9lMDYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbG9nO1xuLyplc2xpbnQgbm8tY29uc29sZTowKi9cbmZ1bmN0aW9uIGxvZygpIHtcbiAgaWYgKHVuZGVmaW5lZCkgY29uc29sZS5sb2coLi4uYXJndW1lbnRzKTtcbn0iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwibG9nIiwidW5kZWZpbmVkIiwiY29uc29sZSIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/utils/log.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/utils/positionFns.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/positionFns.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.canDragX = canDragX;\nexports.canDragY = canDragY;\nexports.createCoreData = createCoreData;\nexports.createDraggableData = createDraggableData;\nexports.getBoundPosition = getBoundPosition;\nexports.getControlPosition = getControlPosition;\nexports.snapToGrid = snapToGrid;\nvar _shims = __webpack_require__(/*! ./shims */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js\");\nvar _domFns = __webpack_require__(/*! ./domFns */ \"(ssr)/./node_modules/react-draggable/build/cjs/utils/domFns.js\");\n/*:: import type Draggable from '../Draggable';*/ /*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/ /*:: import type DraggableCore from '../DraggableCore';*/ function getBoundPosition(draggable /*: Draggable*/ , x /*: number*/ , y /*: number*/ ) /*: [number, number]*/ {\n    // If no bounds, short-circuit and move on\n    if (!draggable.props.bounds) return [\n        x,\n        y\n    ];\n    // Clone new bounds\n    let { bounds } = draggable.props;\n    bounds = typeof bounds === \"string\" ? bounds : cloneBounds(bounds);\n    const node = findDOMNode(draggable);\n    if (typeof bounds === \"string\") {\n        const { ownerDocument } = node;\n        const ownerWindow = ownerDocument.defaultView;\n        let boundNode;\n        if (bounds === \"parent\") {\n            boundNode = node.parentNode;\n        } else {\n            // Flow assigns the wrong return type (Node) for getRootNode(),\n            // so we cast it to one of the correct types (Element).\n            // The others are Document and ShadowRoot.\n            // All three implement querySelector() so it's safe to call.\n            const rootNode = node.getRootNode();\n            boundNode = rootNode.querySelector(bounds);\n        }\n        if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n            throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n        }\n        const boundNodeEl /*: HTMLElement*/  = boundNode; // for Flow, can't seem to refine correctly\n        const nodeStyle = ownerWindow.getComputedStyle(node);\n        const boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);\n        // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n        bounds = {\n            left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),\n            top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),\n            right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),\n            bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)\n        };\n    }\n    // Keep x and y below right and bottom limits...\n    if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);\n    if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom);\n    // But above left and top limits.\n    if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);\n    if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);\n    return [\n        x,\n        y\n    ];\n}\nfunction snapToGrid(grid /*: [number, number]*/ , pendingX /*: number*/ , pendingY /*: number*/ ) /*: [number, number]*/ {\n    const x = Math.round(pendingX / grid[0]) * grid[0];\n    const y = Math.round(pendingY / grid[1]) * grid[1];\n    return [\n        x,\n        y\n    ];\n}\nfunction canDragX(draggable /*: Draggable*/ ) /*: boolean*/ {\n    return draggable.props.axis === \"both\" || draggable.props.axis === \"x\";\n}\nfunction canDragY(draggable /*: Draggable*/ ) /*: boolean*/ {\n    return draggable.props.axis === \"both\" || draggable.props.axis === \"y\";\n}\n// Get {x, y} positions from event.\nfunction getControlPosition(e /*: MouseTouchEvent*/ , touchIdentifier /*: ?number*/ , draggableCore /*: DraggableCore*/ ) /*: ?ControlPosition*/ {\n    const touchObj = typeof touchIdentifier === \"number\" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;\n    if (typeof touchIdentifier === \"number\" && !touchObj) return null; // not the right touch\n    const node = findDOMNode(draggableCore);\n    // User can provide an offsetParent if desired.\n    const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n    return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);\n}\n// Create an data object exposed by <DraggableCore>'s events\nfunction createCoreData(draggable /*: DraggableCore*/ , x /*: number*/ , y /*: number*/ ) /*: DraggableData*/ {\n    const isStart = !(0, _shims.isNum)(draggable.lastX);\n    const node = findDOMNode(draggable);\n    if (isStart) {\n        // If this is our first move, use the x and y as last coords.\n        return {\n            node,\n            deltaX: 0,\n            deltaY: 0,\n            lastX: x,\n            lastY: y,\n            x,\n            y\n        };\n    } else {\n        // Otherwise calculate proper values.\n        return {\n            node,\n            deltaX: x - draggable.lastX,\n            deltaY: y - draggable.lastY,\n            lastX: draggable.lastX,\n            lastY: draggable.lastY,\n            x,\n            y\n        };\n    }\n}\n// Create an data exposed by <Draggable>'s events\nfunction createDraggableData(draggable /*: Draggable*/ , coreData /*: DraggableData*/ ) /*: DraggableData*/ {\n    const scale = draggable.props.scale;\n    return {\n        node: coreData.node,\n        x: draggable.state.x + coreData.deltaX / scale,\n        y: draggable.state.y + coreData.deltaY / scale,\n        deltaX: coreData.deltaX / scale,\n        deltaY: coreData.deltaY / scale,\n        lastX: draggable.state.x,\n        lastY: draggable.state.y\n    };\n}\n// A lot faster than stringify/parse\nfunction cloneBounds(bounds /*: Bounds*/ ) /*: Bounds*/ {\n    return {\n        left: bounds.left,\n        top: bounds.top,\n        right: bounds.right,\n        bottom: bounds.bottom\n    };\n}\nfunction findDOMNode(draggable /*: Draggable | DraggableCore*/ ) /*: HTMLElement*/ {\n    const node = draggable.findDOMNode();\n    if (!node) {\n        throw new Error(\"<DraggableCore>: Unmounted during event!\");\n    }\n    // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n    return node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/utils/positionFns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/shims.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dontSetMe = dontSetMe;\nexports.findInArray = findInArray;\nexports.int = int;\nexports.isFunction = isFunction;\nexports.isNum = isNum;\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array /*: Array<any> | TouchList*/ , callback /*: Function*/ ) /*: any*/ {\n    for(let i = 0, length = array.length; i < length; i++){\n        if (callback.apply(callback, [\n            array[i],\n            i,\n            array\n        ])) return array[i];\n    }\n}\nfunction isFunction(func /*: any*/ ) /*: boolean %checks*/ {\n    // $FlowIgnore[method-unbinding]\n    return typeof func === \"function\" || Object.prototype.toString.call(func) === \"[object Function]\";\n}\nfunction isNum(num /*: any*/ ) /*: boolean %checks*/ {\n    return typeof num === \"number\" && !isNaN(num);\n}\nfunction int(a /*: string*/ ) /*: number*/ {\n    return parseInt(a, 10);\n}\nfunction dontSetMe(props /*: Object*/ , propName /*: string*/ , componentName /*: string*/ ) /*: ?Error*/ {\n    if (props[propName]) {\n        return new Error(`Invalid prop ${propName} passed to ${componentName} - do not set this, set it on the child.`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy91dGlscy9zaGltcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsaUJBQWlCLEdBQUdFO0FBQ3BCRixtQkFBbUIsR0FBR0c7QUFDdEJILFdBQVcsR0FBR0k7QUFDZEosa0JBQWtCLEdBQUdLO0FBQ3JCTCxhQUFhLEdBQUdNO0FBQ2hCLHFFQUFxRTtBQUNyRSxTQUFTSCxZQUFZSSxNQUFNLDBCQUEwQixHQUEzQixFQUErQkMsU0FBUyxZQUFZLEdBQWIsRUFBaUIsT0FBTztJQUN2RixJQUFLLElBQUlDLElBQUksR0FBR0MsU0FBU0gsTUFBTUcsTUFBTSxFQUFFRCxJQUFJQyxRQUFRRCxJQUFLO1FBQ3RELElBQUlELFNBQVNHLEtBQUssQ0FBQ0gsVUFBVTtZQUFDRCxLQUFLLENBQUNFLEVBQUU7WUFBRUE7WUFBR0Y7U0FBTSxHQUFHLE9BQU9BLEtBQUssQ0FBQ0UsRUFBRTtJQUNyRTtBQUNGO0FBQ0EsU0FBU0osV0FBV08sS0FBSyxPQUFPLEdBQVIsRUFBWSxtQkFBbUI7SUFDckQsZ0NBQWdDO0lBQ2hDLE9BQU8sT0FBT0EsU0FBUyxjQUFjZCxPQUFPZSxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSCxVQUFVO0FBQ2hGO0FBQ0EsU0FBU04sTUFBTVUsSUFBSSxPQUFPLEdBQVIsRUFBWSxtQkFBbUI7SUFDL0MsT0FBTyxPQUFPQSxRQUFRLFlBQVksQ0FBQ0MsTUFBTUQ7QUFDM0M7QUFDQSxTQUFTWixJQUFJYyxFQUFFLFVBQVUsR0FBWCxFQUFlLFVBQVU7SUFDckMsT0FBT0MsU0FBU0QsR0FBRztBQUNyQjtBQUNBLFNBQVNoQixVQUFVa0IsTUFBTSxVQUFVLEdBQVgsRUFBZUMsU0FBUyxVQUFVLEdBQVgsRUFBZUMsY0FBYyxVQUFVLEdBQVgsRUFBZSxVQUFVO0lBQ2xHLElBQUlGLEtBQUssQ0FBQ0MsU0FBUyxFQUFFO1FBQ25CLE9BQU8sSUFBSUUsTUFBTSxDQUFDLGFBQWEsRUFBRUYsU0FBUyxXQUFXLEVBQUVDLGNBQWMsd0NBQXdDLENBQUM7SUFDaEg7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL3V0aWxzL3NoaW1zLmpzP2Q5ZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRvbnRTZXRNZSA9IGRvbnRTZXRNZTtcbmV4cG9ydHMuZmluZEluQXJyYXkgPSBmaW5kSW5BcnJheTtcbmV4cG9ydHMuaW50ID0gaW50O1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmV4cG9ydHMuaXNOdW0gPSBpc051bTtcbi8vIEBjcmVkaXRzIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JvZ296aG5pa29mZi9hNDNjZmVkMjdjNDFlNGU2OGNkY1xuZnVuY3Rpb24gZmluZEluQXJyYXkoYXJyYXkgLyo6IEFycmF5PGFueT4gfCBUb3VjaExpc3QqLywgY2FsbGJhY2sgLyo6IEZ1bmN0aW9uKi8pIC8qOiBhbnkqL3tcbiAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBbYXJyYXlbaV0sIGksIGFycmF5XSkpIHJldHVybiBhcnJheVtpXTtcbiAgfVxufVxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jIC8qOiBhbnkqLykgLyo6IGJvb2xlYW4gJWNoZWNrcyove1xuICAvLyAkRmxvd0lnbm9yZVttZXRob2QtdW5iaW5kaW5nXVxuICByZXR1cm4gdHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZ1bmMpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuZnVuY3Rpb24gaXNOdW0obnVtIC8qOiBhbnkqLykgLyo6IGJvb2xlYW4gJWNoZWNrcyove1xuICByZXR1cm4gdHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG51bSk7XG59XG5mdW5jdGlvbiBpbnQoYSAvKjogc3RyaW5nKi8pIC8qOiBudW1iZXIqL3tcbiAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbn1cbmZ1bmN0aW9uIGRvbnRTZXRNZShwcm9wcyAvKjogT2JqZWN0Ki8sIHByb3BOYW1lIC8qOiBzdHJpbmcqLywgY29tcG9uZW50TmFtZSAvKjogc3RyaW5nKi8pIC8qOiA/RXJyb3IqL3tcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYEludmFsaWQgcHJvcCAke3Byb3BOYW1lfSBwYXNzZWQgdG8gJHtjb21wb25lbnROYW1lfSAtIGRvIG5vdCBzZXQgdGhpcywgc2V0IGl0IG9uIHRoZSBjaGlsZC5gKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRvbnRTZXRNZSIsImZpbmRJbkFycmF5IiwiaW50IiwiaXNGdW5jdGlvbiIsImlzTnVtIiwiYXJyYXkiLCJjYWxsYmFjayIsImkiLCJsZW5ndGgiLCJhcHBseSIsImZ1bmMiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJudW0iLCJpc05hTiIsImEiLCJwYXJzZUludCIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-draggable/build/cjs/utils/shims.js\n");

/***/ })

};
;