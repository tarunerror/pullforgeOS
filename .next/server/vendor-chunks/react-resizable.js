"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-resizable";
exports.ids = ["vendor-chunks/react-resizable"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-resizable/build/Resizable.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-resizable/build/Resizable.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _reactDraggable = __webpack_require__(/*! react-draggable */ \"(ssr)/./node_modules/react-draggable/build/cjs/cjs.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-resizable/build/utils.js\");\nvar _propTypes = __webpack_require__(/*! ./propTypes */ \"(ssr)/./node_modules/react-resizable/build/propTypes.js\");\nvar _excluded = [\n    \"children\",\n    \"className\",\n    \"draggableOpts\",\n    \"width\",\n    \"height\",\n    \"handle\",\n    \"handleSize\",\n    \"lockAspectRatio\",\n    \"axis\",\n    \"minConstraints\",\n    \"maxConstraints\",\n    \"onResize\",\n    \"onResizeStop\",\n    \"onResizeStart\",\n    \"resizeHandles\",\n    \"transformScale\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\n// The base <Resizable> component.\n// This component does not have state and relies on the parent to set its props based on callback data.\nvar Resizable = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(Resizable, _React$Component);\n    function Resizable() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _this.handleRefs = {};\n        _this.lastHandleRect = null;\n        _this.slack = null;\n        return _this;\n    }\n    var _proto = Resizable.prototype;\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.resetData();\n    };\n    _proto.resetData = function resetData() {\n        this.lastHandleRect = this.slack = null;\n    };\n    _proto.runConstraints = function runConstraints(width, height) {\n        var _this$props = this.props, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio;\n        // short circuit\n        if (!minConstraints && !maxConstraints && !lockAspectRatio) return [\n            width,\n            height\n        ];\n        // If constraining to min and max, we need to also fit width and height to aspect ratio.\n        if (lockAspectRatio) {\n            var ratio = this.props.width / this.props.height;\n            var deltaW = width - this.props.width;\n            var deltaH = height - this.props.height;\n            // Find which coordinate was greater and should push the other toward it.\n            // E.g.:\n            // ratio = 1, deltaW = 10, deltaH = 5, deltaH should become 10.\n            // ratio = 2, deltaW = 10, deltaH = 6, deltaW should become 12.\n            if (Math.abs(deltaW) > Math.abs(deltaH * ratio)) {\n                height = width / ratio;\n            } else {\n                width = height * ratio;\n            }\n        }\n        var oldW = width, oldH = height;\n        // Add slack to the values used to calculate bound position. This will ensure that if\n        // we start removing slack, the element won't react to it right away until it's been\n        // completely removed.\n        var _ref = this.slack || [\n            0,\n            0\n        ], slackW = _ref[0], slackH = _ref[1];\n        width += slackW;\n        height += slackH;\n        if (minConstraints) {\n            width = Math.max(minConstraints[0], width);\n            height = Math.max(minConstraints[1], height);\n        }\n        if (maxConstraints) {\n            width = Math.min(maxConstraints[0], width);\n            height = Math.min(maxConstraints[1], height);\n        }\n        // If the width or height changed, we must have introduced some slack. Record it for the next iteration.\n        this.slack = [\n            slackW + (oldW - width),\n            slackH + (oldH - height)\n        ];\n        return [\n            width,\n            height\n        ];\n    } /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */ ;\n    _proto.resizeHandler = function resizeHandler(handlerName, axis) {\n        var _this2 = this;\n        return function(e, _ref2) {\n            var node = _ref2.node, deltaX = _ref2.deltaX, deltaY = _ref2.deltaY;\n            // Reset data in case it was left over somehow (should not be possible)\n            if (handlerName === \"onResizeStart\") _this2.resetData();\n            // Axis restrictions\n            var canDragX = (_this2.props.axis === \"both\" || _this2.props.axis === \"x\") && axis !== \"n\" && axis !== \"s\";\n            var canDragY = (_this2.props.axis === \"both\" || _this2.props.axis === \"y\") && axis !== \"e\" && axis !== \"w\";\n            // No dragging possible.\n            if (!canDragX && !canDragY) return;\n            // Decompose axis for later use\n            var axisV = axis[0];\n            var axisH = axis[axis.length - 1]; // intentionally not axis[1], so that this catches axis === 'w' for example\n            // Track the element being dragged to account for changes in position.\n            // If a handle's position is changed between callbacks, we need to factor this in to the next callback.\n            // Failure to do so will cause the element to \"skip\" when resized upwards or leftwards.\n            var handleRect = node.getBoundingClientRect();\n            if (_this2.lastHandleRect != null) {\n                // If the handle has repositioned on either axis since last render,\n                // we need to increase our callback values by this much.\n                // Only checking 'n', 'w' since resizing by 's', 'w' won't affect the overall position on page,\n                if (axisH === \"w\") {\n                    var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;\n                    deltaX += deltaLeftSinceLast;\n                }\n                if (axisV === \"n\") {\n                    var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;\n                    deltaY += deltaTopSinceLast;\n                }\n            }\n            // Storage of last rect so we know how much it has really moved.\n            _this2.lastHandleRect = handleRect;\n            // Reverse delta if using top or left drag handles.\n            if (axisH === \"w\") deltaX = -deltaX;\n            if (axisV === \"n\") deltaY = -deltaY;\n            // Update w/h by the deltas. Also factor in transformScale.\n            var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);\n            var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0);\n            // Run user-provided constraints.\n            var _this2$runConstraints = _this2.runConstraints(width, height);\n            width = _this2$runConstraints[0];\n            height = _this2$runConstraints[1];\n            var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height;\n            // Call user-supplied callback if present.\n            var cb = typeof _this2.props[handlerName] === \"function\" ? _this2.props[handlerName] : null;\n            // Don't call 'onResize' if dimensions haven't changed.\n            var shouldSkipCb = handlerName === \"onResize\" && !dimensionsChanged;\n            if (cb && !shouldSkipCb) {\n                e.persist == null ? void 0 : e.persist();\n                cb(e, {\n                    node: node,\n                    size: {\n                        width: width,\n                        height: height\n                    },\n                    handle: axis\n                });\n            }\n            // Reset internal data\n            if (handlerName === \"onResizeStop\") _this2.resetData();\n        };\n    };\n    _proto.renderResizeHandle = function renderResizeHandle(handleAxis, ref) {\n        var handle = this.props.handle;\n        // No handle provided, make the default\n        if (!handle) {\n            return /*#__PURE__*/ React.createElement(\"span\", {\n                className: \"react-resizable-handle react-resizable-handle-\" + handleAxis,\n                ref: ref\n            });\n        }\n        // Handle is a function, such as:\n        // `handle={(handleAxis) => <span className={...} />}`\n        if (typeof handle === \"function\") {\n            return handle(handleAxis, ref);\n        }\n        // Handle is a React component (composite or DOM).\n        var isDOMElement = typeof handle.type === \"string\";\n        var props = _objectSpread({\n            ref: ref\n        }, isDOMElement ? {} : {\n            handleAxis: handleAxis\n        });\n        return /*#__PURE__*/ React.cloneElement(handle, props);\n    };\n    _proto.render = function render() {\n        var _this3 = this;\n        // Pass along only props not meant for the `<Resizable>`.`\n        // eslint-disable-next-line no-unused-vars\n        var _this$props2 = this.props, children = _this$props2.children, className = _this$props2.className, draggableOpts = _this$props2.draggableOpts, width = _this$props2.width, height = _this$props2.height, handle = _this$props2.handle, handleSize = _this$props2.handleSize, lockAspectRatio = _this$props2.lockAspectRatio, axis = _this$props2.axis, minConstraints = _this$props2.minConstraints, maxConstraints = _this$props2.maxConstraints, onResize = _this$props2.onResize, onResizeStop = _this$props2.onResizeStop, onResizeStart = _this$props2.onResizeStart, resizeHandles = _this$props2.resizeHandles, transformScale = _this$props2.transformScale, p = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n        // What we're doing here is getting the child of this element, and cloning it with this element's props.\n        // We are then defining its children as:\n        // 1. Its original children (resizable's child's children), and\n        // 2. One or more draggable handles.\n        return (0, _utils.cloneElement)(children, _objectSpread(_objectSpread({}, p), {}, {\n            className: (className ? className + \" \" : \"\") + \"react-resizable\",\n            children: [].concat(children.props.children, resizeHandles.map(function(handleAxis) {\n                var _this3$handleRefs$han;\n                // Create a ref to the handle so that `<DraggableCore>` doesn't have to use ReactDOM.findDOMNode().\n                var ref = (_this3$handleRefs$han = _this3.handleRefs[handleAxis]) != null ? _this3$handleRefs$han : _this3.handleRefs[handleAxis] = /*#__PURE__*/ React.createRef();\n                return /*#__PURE__*/ React.createElement(_reactDraggable.DraggableCore, _extends({}, draggableOpts, {\n                    nodeRef: ref,\n                    key: \"resizableHandle-\" + handleAxis,\n                    onStop: _this3.resizeHandler(\"onResizeStop\", handleAxis),\n                    onStart: _this3.resizeHandler(\"onResizeStart\", handleAxis),\n                    onDrag: _this3.resizeHandler(\"onResize\", handleAxis)\n                }), _this3.renderResizeHandle(handleAxis, ref));\n            }))\n        }));\n    };\n    return Resizable;\n}(React.Component);\nexports[\"default\"] = Resizable;\nResizable.propTypes = _propTypes.resizableProps;\nResizable.defaultProps = {\n    axis: \"both\",\n    handleSize: [\n        20,\n        20\n    ],\n    lockAspectRatio: false,\n    minConstraints: [\n        20,\n        20\n    ],\n    maxConstraints: [\n        Infinity,\n        Infinity\n    ],\n    resizeHandles: [\n        \"se\"\n    ],\n    transformScale: 1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resizable/build/Resizable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-resizable/build/ResizableBox.js":
/*!************************************************************!*\
  !*** ./node_modules/react-resizable/build/ResizableBox.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _Resizable = _interopRequireDefault(__webpack_require__(/*! ./Resizable */ \"(ssr)/./node_modules/react-resizable/build/Resizable.js\"));\nvar _propTypes2 = __webpack_require__(/*! ./propTypes */ \"(ssr)/./node_modules/react-resizable/build/propTypes.js\");\nvar _excluded = [\n    \"handle\",\n    \"handleSize\",\n    \"onResize\",\n    \"onResizeStart\",\n    \"onResizeStop\",\n    \"draggableOpts\",\n    \"minConstraints\",\n    \"maxConstraints\",\n    \"lockAspectRatio\",\n    \"axis\",\n    \"width\",\n    \"height\",\n    \"resizeHandles\",\n    \"style\",\n    \"transformScale\"\n];\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nvar ResizableBox = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(ResizableBox, _React$Component);\n    function ResizableBox() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _this.state = {\n            width: _this.props.width,\n            height: _this.props.height,\n            propsWidth: _this.props.width,\n            propsHeight: _this.props.height\n        };\n        _this.onResize = function(e, data) {\n            var size = data.size;\n            if (_this.props.onResize) {\n                e.persist == null ? void 0 : e.persist();\n                _this.setState(size, function() {\n                    return _this.props.onResize && _this.props.onResize(e, data);\n                });\n            } else {\n                _this.setState(size);\n            }\n        };\n        return _this;\n    }\n    ResizableBox.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n        // If parent changes height/width, set that in our state.\n        if (state.propsWidth !== props.width || state.propsHeight !== props.height) {\n            return {\n                width: props.width,\n                height: props.height,\n                propsWidth: props.width,\n                propsHeight: props.height\n            };\n        }\n        return null;\n    };\n    var _proto = ResizableBox.prototype;\n    _proto.render = function render() {\n        // Basic wrapper around a Resizable instance.\n        // If you use Resizable directly, you are responsible for updating the child component\n        // with a new width and height.\n        var _this$props = this.props, handle = _this$props.handle, handleSize = _this$props.handleSize, onResize = _this$props.onResize, onResizeStart = _this$props.onResizeStart, onResizeStop = _this$props.onResizeStop, draggableOpts = _this$props.draggableOpts, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio, axis = _this$props.axis, width = _this$props.width, height = _this$props.height, resizeHandles = _this$props.resizeHandles, style = _this$props.style, transformScale = _this$props.transformScale, props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n        return /*#__PURE__*/ React.createElement(_Resizable.default, {\n            axis: axis,\n            draggableOpts: draggableOpts,\n            handle: handle,\n            handleSize: handleSize,\n            height: this.state.height,\n            lockAspectRatio: lockAspectRatio,\n            maxConstraints: maxConstraints,\n            minConstraints: minConstraints,\n            onResizeStart: onResizeStart,\n            onResize: this.onResize,\n            onResizeStop: onResizeStop,\n            resizeHandles: resizeHandles,\n            transformScale: transformScale,\n            width: this.state.width\n        }, /*#__PURE__*/ React.createElement(\"div\", _extends({}, props, {\n            style: _objectSpread(_objectSpread({}, style), {}, {\n                width: this.state.width + \"px\",\n                height: this.state.height + \"px\"\n            })\n        })));\n    };\n    return ResizableBox;\n}(React.Component);\nexports[\"default\"] = ResizableBox;\n// PropTypes are identical to <Resizable>, except that children are not strictly required to be present.\nResizableBox.propTypes = _objectSpread(_objectSpread({}, _propTypes2.resizableProps), {}, {\n    children: _propTypes.default.element\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resizable/build/ResizableBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-resizable/build/propTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-resizable/build/propTypes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.resizableProps = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _reactDraggable = __webpack_require__(/*! react-draggable */ \"(ssr)/./node_modules/react-draggable/build/cjs/cjs.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar resizableProps = {\n    /*\n  * Restricts resizing to a particular axis (default: 'both')\n  * 'both' - allows resizing by width or height\n  * 'x' - only allows the width to be changed\n  * 'y' - only allows the height to be changed\n  * 'none' - disables resizing altogether\n  * */ axis: _propTypes.default.oneOf([\n        \"both\",\n        \"x\",\n        \"y\",\n        \"none\"\n    ]),\n    className: _propTypes.default.string,\n    /*\n  * Require that one and only one child be present.\n  * */ children: _propTypes.default.element.isRequired,\n    /*\n  * These will be passed wholesale to react-draggable's DraggableCore\n  * */ draggableOpts: _propTypes.default.shape({\n        allowAnyClick: _propTypes.default.bool,\n        cancel: _propTypes.default.string,\n        children: _propTypes.default.node,\n        disabled: _propTypes.default.bool,\n        enableUserSelectHack: _propTypes.default.bool,\n        offsetParent: _propTypes.default.node,\n        grid: _propTypes.default.arrayOf(_propTypes.default.number),\n        handle: _propTypes.default.string,\n        nodeRef: _propTypes.default.object,\n        onStart: _propTypes.default.func,\n        onDrag: _propTypes.default.func,\n        onStop: _propTypes.default.func,\n        onMouseDown: _propTypes.default.func,\n        scale: _propTypes.default.number\n    }),\n    /*\n  * Initial height\n  * */ height: function height() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var props = args[0];\n        // Required if resizing height or both\n        if (props.axis === \"both\" || props.axis === \"y\") {\n            var _PropTypes$number;\n            return (_PropTypes$number = _propTypes.default.number).isRequired.apply(_PropTypes$number, args);\n        }\n        return _propTypes.default.number.apply(_propTypes.default, args);\n    },\n    /*\n  * Customize cursor resize handle\n  * */ handle: _propTypes.default.oneOfType([\n        _propTypes.default.node,\n        _propTypes.default.func\n    ]),\n    /*\n  * If you change this, be sure to update your css\n  * */ handleSize: _propTypes.default.arrayOf(_propTypes.default.number),\n    lockAspectRatio: _propTypes.default.bool,\n    /*\n  * Max X & Y measure\n  * */ maxConstraints: _propTypes.default.arrayOf(_propTypes.default.number),\n    /*\n  * Min X & Y measure\n  * */ minConstraints: _propTypes.default.arrayOf(_propTypes.default.number),\n    /*\n  * Called on stop resize event\n  * */ onResizeStop: _propTypes.default.func,\n    /*\n  * Called on start resize event\n  * */ onResizeStart: _propTypes.default.func,\n    /*\n  * Called on resize event\n  * */ onResize: _propTypes.default.func,\n    /*\n  * Defines which resize handles should be rendered (default: 'se')\n  * 's' - South handle (bottom-center)\n  * 'w' - West handle (left-center)\n  * 'e' - East handle (right-center)\n  * 'n' - North handle (top-center)\n  * 'sw' - Southwest handle (bottom-left)\n  * 'nw' - Northwest handle (top-left)\n  * 'se' - Southeast handle (bottom-right)\n  * 'ne' - Northeast handle (top-center)\n  * */ resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf([\n        \"s\",\n        \"w\",\n        \"e\",\n        \"n\",\n        \"sw\",\n        \"nw\",\n        \"se\",\n        \"ne\"\n    ])),\n    /*\n  * If `transform: scale(n)` is set on the parent, this should be set to `n`.\n  * */ transformScale: _propTypes.default.number,\n    /*\n   * Initial width\n   */ width: function width() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        var props = args[0];\n        // Required if resizing width or both\n        if (props.axis === \"both\" || props.axis === \"x\") {\n            var _PropTypes$number2;\n            return (_PropTypes$number2 = _propTypes.default.number).isRequired.apply(_PropTypes$number2, args);\n        }\n        return _propTypes.default.number.apply(_propTypes.default, args);\n    }\n};\nexports.resizableProps = resizableProps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzaXphYmxlL2J1aWxkL3Byb3BUeXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxrQkFBa0IsR0FBRztBQUNyQkEsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixJQUFJRyxhQUFhQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDREQUFZO0FBQzVELElBQUlDLGtCQUFrQkQsbUJBQU9BLENBQUMsOEVBQWlCO0FBQy9DLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlOLFVBQVUsR0FBR00sTUFBTTtRQUFFQyxTQUFTRDtJQUFJO0FBQUc7QUFDOUYsSUFBSUwsaUJBQWlCO0lBQ25COzs7Ozs7SUFNRSxHQUNGTyxNQUFNTixXQUFXSyxPQUFPLENBQUNFLEtBQUssQ0FBQztRQUFDO1FBQVE7UUFBSztRQUFLO0tBQU87SUFDekRDLFdBQVdSLFdBQVdLLE9BQU8sQ0FBQ0ksTUFBTTtJQUNwQzs7SUFFRSxHQUNGQyxVQUFVVixXQUFXSyxPQUFPLENBQUNNLE9BQU8sQ0FBQ0MsVUFBVTtJQUMvQzs7SUFFRSxHQUNGQyxlQUFlYixXQUFXSyxPQUFPLENBQUNTLEtBQUssQ0FBQztRQUN0Q0MsZUFBZWYsV0FBV0ssT0FBTyxDQUFDVyxJQUFJO1FBQ3RDQyxRQUFRakIsV0FBV0ssT0FBTyxDQUFDSSxNQUFNO1FBQ2pDQyxVQUFVVixXQUFXSyxPQUFPLENBQUNhLElBQUk7UUFDakNDLFVBQVVuQixXQUFXSyxPQUFPLENBQUNXLElBQUk7UUFDakNJLHNCQUFzQnBCLFdBQVdLLE9BQU8sQ0FBQ1csSUFBSTtRQUM3Q0ssY0FBY3JCLFdBQVdLLE9BQU8sQ0FBQ2EsSUFBSTtRQUNyQ0ksTUFBTXRCLFdBQVdLLE9BQU8sQ0FBQ2tCLE9BQU8sQ0FBQ3ZCLFdBQVdLLE9BQU8sQ0FBQ21CLE1BQU07UUFDMURDLFFBQVF6QixXQUFXSyxPQUFPLENBQUNJLE1BQU07UUFDakNpQixTQUFTMUIsV0FBV0ssT0FBTyxDQUFDc0Is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Q0FBQ21CLEtBQUssQ0FBQzNDLFdBQVdLLE9BQU8sRUFBRWlDO0lBQzdEO0FBQ0Y7QUFDQXpDLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNpemFibGUvYnVpbGQvcHJvcFR5cGVzLmpzPzBhYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJlc2l6YWJsZVByb3BzID0gdm9pZCAwO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfcmVhY3REcmFnZ2FibGUgPSByZXF1aXJlKFwicmVhY3QtZHJhZ2dhYmxlXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciByZXNpemFibGVQcm9wcyA9IHtcbiAgLypcbiAgKiBSZXN0cmljdHMgcmVzaXppbmcgdG8gYSBwYXJ0aWN1bGFyIGF4aXMgKGRlZmF1bHQ6ICdib3RoJylcbiAgKiAnYm90aCcgLSBhbGxvd3MgcmVzaXppbmcgYnkgd2lkdGggb3IgaGVpZ2h0XG4gICogJ3gnIC0gb25seSBhbGxvd3MgdGhlIHdpZHRoIHRvIGJlIGNoYW5nZWRcbiAgKiAneScgLSBvbmx5IGFsbG93cyB0aGUgaGVpZ2h0IHRvIGJlIGNoYW5nZWRcbiAgKiAnbm9uZScgLSBkaXNhYmxlcyByZXNpemluZyBhbHRvZ2V0aGVyXG4gICogKi9cbiAgYXhpczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYm90aCcsICd4JywgJ3knLCAnbm9uZSddKSxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKlxuICAqIFJlcXVpcmUgdGhhdCBvbmUgYW5kIG9ubHkgb25lIGNoaWxkIGJlIHByZXNlbnQuXG4gICogKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIC8qXG4gICogVGhlc2Ugd2lsbCBiZSBwYXNzZWQgd2hvbGVzYWxlIHRvIHJlYWN0LWRyYWdnYWJsZSdzIERyYWdnYWJsZUNvcmVcbiAgKiAqL1xuICBkcmFnZ2FibGVPcHRzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGFsbG93QW55Q2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAgIGNhbmNlbDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gICAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAgIGVuYWJsZVVzZXJTZWxlY3RIYWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgICBvZmZzZXRQYXJlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAgIGdyaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIpLFxuICAgIGhhbmRsZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgICBub2RlUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIG9uU3RhcnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uRHJhZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gICAgb25TdG9wOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gICAgc2NhbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSksXG4gIC8qXG4gICogSW5pdGlhbCBoZWlnaHRcbiAgKiAqL1xuICBoZWlnaHQ6IGZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHZhciBwcm9wcyA9IGFyZ3NbMF07XG4gICAgLy8gUmVxdWlyZWQgaWYgcmVzaXppbmcgaGVpZ2h0IG9yIGJvdGhcbiAgICBpZiAocHJvcHMuYXhpcyA9PT0gJ2JvdGgnIHx8IHByb3BzLmF4aXMgPT09ICd5Jykge1xuICAgICAgdmFyIF9Qcm9wVHlwZXMkbnVtYmVyO1xuICAgICAgcmV0dXJuIChfUHJvcFR5cGVzJG51bWJlciA9IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIpLmlzUmVxdWlyZWQuYXBwbHkoX1Byb3BUeXBlcyRudW1iZXIsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlci5hcHBseShfcHJvcFR5cGVzLmRlZmF1bHQsIGFyZ3MpO1xuICB9LFxuICAvKlxuICAqIEN1c3RvbWl6ZSBjdXJzb3IgcmVzaXplIGhhbmRsZVxuICAqICovXG4gIGhhbmRsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG4gIC8qXG4gICogSWYgeW91IGNoYW5nZSB0aGlzLCBiZSBzdXJlIHRvIHVwZGF0ZSB5b3VyIGNzc1xuICAqICovXG4gIGhhbmRsZVNpemU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIpLFxuICBsb2NrQXNwZWN0UmF0aW86IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKlxuICAqIE1heCBYICYgWSBtZWFzdXJlXG4gICogKi9cbiAgbWF4Q29uc3RyYWludHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIpLFxuICAvKlxuICAqIE1pbiBYICYgWSBtZWFzdXJlXG4gICogKi9cbiAgbWluQ29uc3RyYWludHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIpLFxuICAvKlxuICAqIENhbGxlZCBvbiBzdG9wIHJlc2l6ZSBldmVudFxuICAqICovXG4gIG9uUmVzaXplU3RvcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qXG4gICogQ2FsbGVkIG9uIHN0YXJ0IHJlc2l6ZSBldmVudFxuICAqICovXG4gIG9uUmVzaXplU3RhcnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKlxuICAqIENhbGxlZCBvbiByZXNpemUgZXZlbnRcbiAgKiAqL1xuICBvblJlc2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qXG4gICogRGVmaW5lcyB3aGljaCByZXNpemUgaGFuZGxlcyBzaG91bGQgYmUgcmVuZGVyZWQgKGRlZmF1bHQ6ICdzZScpXG4gICogJ3MnIC0gU291dGggaGFuZGxlIChib3R0b20tY2VudGVyKVxuICAqICd3JyAtIFdlc3QgaGFuZGxlIChsZWZ0LWNlbnRlcilcbiAgKiAnZScgLSBFYXN0IGhhbmRsZSAocmlnaHQtY2VudGVyKVxuICAqICduJyAtIE5vcnRoIGhhbmRsZSAodG9wLWNlbnRlcilcbiAgKiAnc3cnIC0gU291dGh3ZXN0IGhhbmRsZSAoYm90dG9tLWxlZnQpXG4gICogJ253JyAtIE5vcnRod2VzdCBoYW5kbGUgKHRvcC1sZWZ0KVxuICAqICdzZScgLSBTb3V0aGVhc3QgaGFuZGxlIChib3R0b20tcmlnaHQpXG4gICogJ25lJyAtIE5vcnRoZWFzdCBoYW5kbGUgKHRvcC1jZW50ZXIpXG4gICogKi9cbiAgcmVzaXplSGFuZGxlczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncycsICd3JywgJ2UnLCAnbicsICdzdycsICdudycsICdzZScsICduZSddKSksXG4gIC8qXG4gICogSWYgYHRyYW5zZm9ybTogc2NhbGUobilgIGlzIHNldCBvbiB0aGUgcGFyZW50LCB0aGlzIHNob3VsZCBiZSBzZXQgdG8gYG5gLlxuICAqICovXG4gIHRyYW5zZm9ybVNjYWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAvKlxuICAgKiBJbml0aWFsIHdpZHRoXG4gICAqL1xuICB3aWR0aDogZnVuY3Rpb24gd2lkdGgoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIHZhciBwcm9wcyA9IGFyZ3NbMF07XG4gICAgLy8gUmVxdWlyZWQgaWYgcmVzaXppbmcgd2lkdGggb3IgYm90aFxuICAgIGlmIChwcm9wcy5heGlzID09PSAnYm90aCcgfHwgcHJvcHMuYXhpcyA9PT0gJ3gnKSB7XG4gICAgICB2YXIgX1Byb3BUeXBlcyRudW1iZXIyO1xuICAgICAgcmV0dXJuIChfUHJvcFR5cGVzJG51bWJlcjIgPSBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyKS5pc1JlcXVpcmVkLmFwcGx5KF9Qcm9wVHlwZXMkbnVtYmVyMiwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmFwcGx5KF9wcm9wVHlwZXMuZGVmYXVsdCwgYXJncyk7XG4gIH1cbn07XG5leHBvcnRzLnJlc2l6YWJsZVByb3BzID0gcmVzaXphYmxlUHJvcHM7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwicmVzaXphYmxlUHJvcHMiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3REcmFnZ2FibGUiLCJvYmoiLCJkZWZhdWx0IiwiYXhpcyIsIm9uZU9mIiwiY2xhc3NOYW1lIiwic3RyaW5nIiwiY2hpbGRyZW4iLCJlbGVtZW50IiwiaXNSZXF1aXJlZCIsImRyYWdnYWJsZU9wdHMiLCJzaGFwZSIsImFsbG93QW55Q2xpY2siLCJib29sIiwiY2FuY2VsIiwibm9kZSIsImRpc2FibGVkIiwiZW5hYmxlVXNlclNlbGVjdEhhY2siLCJvZmZzZXRQYXJlbnQiLCJncmlkIiwiYXJyYXlPZiIsIm51bWJlciIsImhhbmRsZSIsIm5vZGVSZWYiLCJvYmplY3QiLCJvblN0YXJ0IiwiZnVuYyIsIm9uRHJhZyIsIm9uU3RvcCIsIm9uTW91c2VEb3duIiwic2NhbGUiLCJoZWlnaHQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInByb3BzIiwiX1Byb3BUeXBlcyRudW1iZXIiLCJhcHBseSIsIm9uZU9mVHlwZSIsImhhbmRsZVNpemUiLCJsb2NrQXNwZWN0UmF0aW8iLCJtYXhDb25zdHJhaW50cyIsIm1pbkNvbnN0cmFpbnRzIiwib25SZXNpemVTdG9wIiwib25SZXNpemVTdGFydCIsIm9uUmVzaXplIiwicmVzaXplSGFuZGxlcyIsInRyYW5zZm9ybVNjYWxlIiwid2lkdGgiLCJfbGVuMiIsIl9rZXkyIiwiX1Byb3BUeXBlcyRudW1iZXIyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resizable/build/propTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-resizable/build/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-resizable/build/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.cloneElement = cloneElement;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n// React.addons.cloneWithProps look-alike that merges style & className.\nfunction cloneElement(element, props) {\n    if (props.style && element.props.style) {\n        props.style = _objectSpread(_objectSpread({}, element.props.style), props.style);\n    }\n    if (props.className && element.props.className) {\n        props.className = element.props.className + \" \" + props.className;\n    }\n    return /*#__PURE__*/ _react.default.cloneElement(element, props);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzaXphYmxlL2J1aWxkL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLGtCQUFrQixHQUFHO0FBQ3JCQSxvQkFBb0IsR0FBR0U7QUFDdkIsSUFBSUMsU0FBU0MsdUJBQXVCQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUNuRCxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJTCxVQUFVLEdBQUdLLE1BQU07UUFBRUMsU0FBU0Q7SUFBSTtBQUFHO0FBQzlGLFNBQVNFLFFBQVFDLE1BQU0sRUFBRUMsY0FBYztJQUFJLElBQUlDLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFBUyxJQUFJRyxPQUFPQyxxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVVGLE9BQU9DLHFCQUFxQixDQUFDSjtRQUFTQyxrQkFBbUJJLENBQUFBLFVBQVVBLFFBQVFDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO1lBQUksT0FBT0osT0FBT0ssd0JBQXdCLENBQUNSLFFBQVFPLEtBQUtFLFVBQVU7UUFBRSxFQUFDLEdBQUlQLEtBQUtRLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxNQUFNRztJQUFVO0lBQUUsT0FBT0g7QUFBTTtBQUNwVixTQUFTVSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVMsUUFBUUYsU0FBUyxDQUFDRCxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBR0EsSUFBSSxJQUFJZixRQUFRSSxPQUFPYyxTQUFTLENBQUMsR0FBR0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSUMsZ0JBQWdCUCxRQUFRTSxLQUFLRixNQUFNLENBQUNFLElBQUk7UUFBRyxLQUFLaEIsT0FBT2tCLHlCQUF5QixHQUFHbEIsT0FBT21CLGdCQUFnQixDQUFDVCxRQUFRVixPQUFPa0IseUJBQXlCLENBQUNKLFdBQVdsQixRQUFRSSxPQUFPYyxTQUFTQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJaEIsT0FBT29CLGNBQWMsQ0FBQ1YsUUFBUU0sS0FBS2hCLE9BQU9LLHdCQUF3QixDQUFDUyxRQUFRRTtRQUFPO0lBQUk7SUFBRSxPQUFPTjtBQUFRO0FBQ3pmLFNBQVNPLGdCQUFnQnZCLEdBQUcsRUFBRXNCLEdBQUcsRUFBRUssS0FBSztJQUFJTCxNQUFNTSxlQUFlTjtJQUFNLElBQUlBLE9BQU90QixLQUFLO1FBQUVNLE9BQU9vQixjQUFjLENBQUMxQixLQUFLc0IsS0FBSztZQUFFSyxPQUFPQTtZQUFPZixZQUFZO1lBQU1pQixjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRTlCLEdBQUcsQ0FBQ3NCLElBQUksR0FBR0s7SUFBTztJQUFFLE9BQU8zQjtBQUFLO0FBQzNPLFNBQVM0QixlQUFlRyxHQUFHO0lBQUksSUFBSVQsTUFBTVUsYUFBYUQsS0FBSztJQUFXLE9BQU8sT0FBT1QsUUFBUSxXQUFXQSxNQUFNVyxPQUFPWDtBQUFNO0FBQzFILFNBQVNVLGFBQWFFLEtBQUssRUFBRUMsSUFBSTtJQUFJLElBQUksT0FBT0QsVUFBVSxZQUFZQSxVQUFVLE1BQU0sT0FBT0E7SUFBTyxJQUFJRSxPQUFPRixLQUFLLENBQUNHLE9BQU9DLFdBQVcsQ0FBQztJQUFFLElBQUlGLFNBQVNHLFdBQVc7UUFBRSxJQUFJQyxNQUFNSixLQUFLSyxJQUFJLENBQUNQLE9BQU9DLFFBQVE7UUFBWSxJQUFJLE9BQU9LLFFBQVEsVUFBVSxPQUFPQTtRQUFLLE1BQU0sSUFBSUUsVUFBVTtJQUFpRDtJQUFFLE9BQU8sQ0FBQ1AsU0FBUyxXQUFXRixTQUFTVSxNQUFLLEVBQUdUO0FBQVE7QUFDeFgsd0VBQXdFO0FBQ3hFLFNBQVN0QyxhQUFhZ0QsT0FBTyxFQUFFQyxLQUFLO0lBQ2xDLElBQUlBLE1BQU1DLEtBQUssSUFBSUYsUUFBUUMsS0FBSyxDQUFDQyxLQUFLLEVBQUU7UUFDdENELE1BQU1DLEtBQUssR0FBRy9CLGNBQWNBLGNBQWMsQ0FBQyxHQUFHNkIsUUFBUUMsS0FBSyxDQUFDQyxLQUFLLEdBQUdELE1BQU1DLEtBQUs7SUFDakY7SUFDQSxJQUFJRCxNQUFNRSxTQUFTLElBQUlILFFBQVFDLEtBQUssQ0FBQ0UsU0FBUyxFQUFFO1FBQzlDRixNQUFNRSxTQUFTLEdBQUdILFFBQVFDLEtBQUssQ0FBQ0UsU0FBUyxHQUFHLE1BQU1GLE1BQU1FLFNBQVM7SUFDbkU7SUFDQSxPQUFPLFdBQVcsR0FBRWxELE9BQU9JLE9BQU8sQ0FBQ0wsWUFBWSxDQUFDZ0QsU0FBU0M7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1vcy1tdnAvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzaXphYmxlL2J1aWxkL3V0aWxzLmpzPzUwNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGNsb25lRWxlbWVudDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG4vLyBSZWFjdC5hZGRvbnMuY2xvbmVXaXRoUHJvcHMgbG9vay1hbGlrZSB0aGF0IG1lcmdlcyBzdHlsZSAmIGNsYXNzTmFtZS5cbmZ1bmN0aW9uIGNsb25lRWxlbWVudChlbGVtZW50LCBwcm9wcykge1xuICBpZiAocHJvcHMuc3R5bGUgJiYgZWxlbWVudC5wcm9wcy5zdHlsZSkge1xuICAgIHByb3BzLnN0eWxlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBlbGVtZW50LnByb3BzLnN0eWxlKSwgcHJvcHMuc3R5bGUpO1xuICB9XG4gIGlmIChwcm9wcy5jbGFzc05hbWUgJiYgZWxlbWVudC5wcm9wcy5jbGFzc05hbWUpIHtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBlbGVtZW50LnByb3BzLmNsYXNzTmFtZSArIFwiIFwiICsgcHJvcHMuY2xhc3NOYW1lO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHByb3BzKTtcbn0iXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJjbG9uZUVsZW1lbnQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsImRlZmF1bHQiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsImVsZW1lbnQiLCJwcm9wcyIsInN0eWxlIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resizable/build/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-resizable/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-resizable/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = function() {\n    throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\nmodule.exports.Resizable = __webpack_require__(/*! ./build/Resizable */ \"(ssr)/./node_modules/react-resizable/build/Resizable.js\")[\"default\"];\nmodule.exports.ResizableBox = __webpack_require__(/*! ./build/ResizableBox */ \"(ssr)/./node_modules/react-resizable/build/ResizableBox.js\")[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzaXphYmxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE9BQU9DLE9BQU8sR0FBRztJQUNmLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBRiw2SUFBK0Q7QUFDL0RBLHNKQUFxRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW9zLW12cC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNpemFibGUvaW5kZXguanM/ZGE2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJEb24ndCBpbnN0YW50aWF0ZSBSZXNpemFibGUgZGlyZWN0bHkhIFVzZSByZXF1aXJlKCdyZWFjdC1yZXNpemFibGUnKS5SZXNpemFibGVcIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5SZXNpemFibGUgPSByZXF1aXJlKCcuL2J1aWxkL1Jlc2l6YWJsZScpLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5SZXNpemFibGVCb3ggPSByZXF1aXJlKCcuL2J1aWxkL1Jlc2l6YWJsZUJveCcpLmRlZmF1bHQ7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVycm9yIiwiUmVzaXphYmxlIiwicmVxdWlyZSIsImRlZmF1bHQiLCJSZXNpemFibGVCb3giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resizable/index.js\n");

/***/ })

};
;