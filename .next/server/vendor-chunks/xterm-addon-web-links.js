/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xterm-addon-web-links";
exports.ids = ["vendor-chunks/xterm-addon-web-links"];
exports.modules = {

/***/ "(ssr)/./node_modules/xterm-addon-web-links/lib/xterm-addon-web-links.js":
/*!*************************************************************************!*\
  !*** ./node_modules/xterm-addon-web-links/lib/xterm-addon-web-links.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("!function(e, t) {\n     true ? module.exports = t() : 0;\n}(self, ()=>(()=>{\n        \"use strict\";\n        var e = {\n            6: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.LinkComputer = t.WebLinkProvider = void 0, t.WebLinkProvider = class {\n                    constructor(e, t, n, i = {}){\n                        this._terminal = e, this._regex = t, this._handler = n, this._options = i;\n                    }\n                    provideLinks(e, t) {\n                        const i = n.computeLink(e, this._regex, this._terminal, this._handler);\n                        t(this._addCallbacks(i));\n                    }\n                    _addCallbacks(e) {\n                        return e.map((e)=>(e.leave = this._options.leave, e.hover = (t, n)=>{\n                                if (this._options.hover) {\n                                    const { range: i } = e;\n                                    this._options.hover(t, n, i);\n                                }\n                            }, e));\n                    }\n                };\n                class n {\n                    static computeLink(e, t, i, r) {\n                        const o = new RegExp(t.source, (t.flags || \"\") + \"g\"), [s, a] = n._getWindowedLineStrings(e - 1, i), c = s.join(\"\");\n                        let d;\n                        const l = [];\n                        for(; d = o.exec(c);){\n                            const e = d[0];\n                            try {\n                                const t = new URL(e), n = decodeURI(t.toString());\n                                if (e !== n && e + \"/\" !== n) continue;\n                            } catch (e) {\n                                continue;\n                            }\n                            const [t, o] = n._mapStrIdx(i, a, 0, d.index), [s, c] = n._mapStrIdx(i, t, o, e.length);\n                            if (-1 === t || -1 === o || -1 === s || -1 === c) continue;\n                            const p = {\n                                start: {\n                                    x: o + 1,\n                                    y: t + 1\n                                },\n                                end: {\n                                    x: c,\n                                    y: s + 1\n                                }\n                            };\n                            l.push({\n                                range: p,\n                                text: e,\n                                activate: r\n                            });\n                        }\n                        return l;\n                    }\n                    static _getWindowedLineStrings(e, t) {\n                        let n, i = e, r = e, o = 0, s = \"\";\n                        const a = [];\n                        if (n = t.buffer.active.getLine(e)) {\n                            const e = n.translateToString(!0);\n                            if (n.isWrapped && \" \" !== e[0]) {\n                                for(o = 0; (n = t.buffer.active.getLine(--i)) && o < 2048 && (s = n.translateToString(!0), o += s.length, a.push(s), n.isWrapped && -1 === s.indexOf(\" \")););\n                                a.reverse();\n                            }\n                            for(a.push(e), o = 0; (n = t.buffer.active.getLine(++r)) && n.isWrapped && o < 2048 && (s = n.translateToString(!0), o += s.length, a.push(s), -1 === s.indexOf(\" \")););\n                        }\n                        return [\n                            a,\n                            i\n                        ];\n                    }\n                    static _mapStrIdx(e, t, n, i) {\n                        const r = e.buffer.active, o = r.getNullCell();\n                        let s = n;\n                        for(; i;){\n                            const e = r.getLine(t);\n                            if (!e) return [\n                                -1,\n                                -1\n                            ];\n                            for(let n = s; n < e.length; ++n){\n                                e.getCell(n, o);\n                                const s = o.getChars();\n                                if (o.getWidth() && (i -= s.length || 1, n === e.length - 1 && \"\" === s)) {\n                                    const e = r.getLine(t + 1);\n                                    e && e.isWrapped && (e.getCell(0, o), 2 === o.getWidth() && (i += 1));\n                                }\n                                if (i < 0) return [\n                                    t,\n                                    n\n                                ];\n                            }\n                            t++, s = 0;\n                        }\n                        return [\n                            t,\n                            s\n                        ];\n                    }\n                }\n                t.LinkComputer = n;\n            }\n        }, t = {};\n        function n(i) {\n            var r = t[i];\n            if (void 0 !== r) return r.exports;\n            var o = t[i] = {\n                exports: {}\n            };\n            return e[i](o, o.exports, n), o.exports;\n        }\n        var i = {};\n        return (()=>{\n            var e = i;\n            Object.defineProperty(e, \"__esModule\", {\n                value: !0\n            }), e.WebLinksAddon = void 0;\n            const t = n(6), r = /https?:[/]{2}[^\\s\"'!*(){}|\\\\\\^<>`]*[^\\s\"':,.!?{}|\\\\\\^~\\[\\]`()<>]/;\n            function o(e, t) {\n                const n = window.open();\n                if (n) {\n                    try {\n                        n.opener = null;\n                    } catch (e) {}\n                    n.location.href = t;\n                } else console.warn(\"Opening link blocked as opener could not be cleared\");\n            }\n            e.WebLinksAddon = class {\n                constructor(e = o, t = {}){\n                    this._handler = e, this._options = t;\n                }\n                activate(e) {\n                    this._terminal = e;\n                    const n = this._options, i = n.urlRegex || r;\n                    this._linkProvider = this._terminal.registerLinkProvider(new t.WebLinkProvider(this._terminal, i, this._handler, n));\n                }\n                dispose() {\n                    var e;\n                    null === (e = this._linkProvider) || void 0 === e || e.dispose();\n                }\n            };\n        })(), i;\n    })()); //# sourceMappingURL=xterm-addon-web-links.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xterm-addon-web-links/lib/xterm-addon-web-links.js\n");

/***/ })

};
;